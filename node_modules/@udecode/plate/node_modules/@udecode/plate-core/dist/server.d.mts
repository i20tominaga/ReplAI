import { Value, TEditor } from '@udecode/slate';
import { C as CreatePlateEditorOptions, b as PlateEditor, d as PlatePlugin, N as NoInfer, O as OverrideByKey, c as PlateProps, h as WithPlateOptions } from './createPlateEditor-DwSgi92n.mjs';
export { bS as ApplyDeepToNodesOptions, a0 as BLUR_EDITOR_EVENT, a9 as CARRIAGE_RETURN, bc as CollapseWhiteSpaceState, bs as DOMHandler, br as DOMHandlerReturnType, bt as DOMHandlers, bo as DOM_HANDLERS, bv as Decorate, bu as DecorateEntry, D as DefaultLeaf, bw as DeserializeHtml, ah as DeserializeHtmlChildren, ai as DeserializeHtmlNodeReturnType, E as ELEMENT_DEFAULT, bm as EXPOSED_STORE_KEYS, a3 as EventEditorState, $ as FOCUS_EDITOR_EVENT, co as GetInjectPropsOptions, cp as GetInjectPropsReturnType, bp as HandlerReturnType, bx as HotkeyPlugin, ct as Hotkeys, bA as InjectComponent, by as InjectComponentProps, bz as InjectComponentReturnType, bC as InjectProps, bX as InjectedPlugin, K as KEY_DESERIALIZE_AST, af as KEY_DESERIALIZE_HTML, t as KEY_EDITOR_PROTOCOL, a1 as KEY_EVENT_EDITOR, y as KEY_HISTORY, B as KEY_INLINE_VOID, J as KEY_INSERT_DATA, Q as KEY_LENGTH, X as KEY_NODE_FACTORY, Z as KEY_PREV_SELECTION, bq as KeyboardEventHandler, bD as KeyboardHandler, bE as KeyboardHandlerReturnType, aa as LINE_FEED, M as LengthPlugin, ab as NO_BREAK_SPACE, bn as Nullable, bF as OnChange, P as PlateChangeKey, bh as PlateEditorMethods, bH as PlatePluginComponent, bJ as PlatePluginInsertData, bI as PlatePluginInsertDataOptions, bL as PlatePluginKey, bM as PlatePluginProps, bi as PlateRenderElementProps, bj as PlateRenderLeafProps, bk as PlateRenderNodeProps, bl as PlateStoreState, bK as PluginKey, bG as PluginOptions, bN as RenderAfterEditable, e as RenderElement, R as RenderElementFn, f as RenderLeaf, ac as SPACE, bO as SerializeHtml, ad as TAB, T as TEditableProps, bR as TRenderElementProps, bP as ToggleMarkPlugin, bf as ToggleNodeTypeOptions, bB as TransformOptions, bb as TrimEndRule, ba as TrimStartRule, b9 as WhiteSpaceRule, bQ as WithOverride, W as WithPlatePlugin, ae as ZERO_WIDTH_SPACE, bT as applyDeepToNodes, aj as cleanHtmlBrElements, ak as cleanHtmlCrLf, al as cleanHtmlEmptyElements, am as cleanHtmlFontElements, an as cleanHtmlLinkElements, ao as cleanHtmlTextNodes, a$ as collapseString, b0 as collapseWhiteSpace, b1 as collapseWhiteSpaceChildren, b2 as collapseWhiteSpaceElement, b3 as collapseWhiteSpaceNode, b4 as collapseWhiteSpaceText, cf as convertDomEventToSyntheticEvent, ap as copyBlockMarksToSpanChild, s as createDeserializeAstPlugin, ag as createDeserializeHtmlPlugin, x as createEditorProtocolPlugin, a2 as createEventEditorPlugin, A as createHistoryPlugin, cs as createHotkey, H as createInlineVoidPlugin, L as createInsertDataPlugin, V as createLengthPlugin, Y as createNodeFactoryPlugin, bU as createPluginFactory, bV as createPlugins, _ as createPrevSelectionPlugin, aq as deserializeHtml, ar as deserializeHtmlElement, as as deserializeHtmlNode, at as deserializeHtmlNodeChildren, b8 as endInlineFormattingContext, a5 as eventEditorActions, a6 as eventEditorSelectors, a4 as eventEditorStore, au as findHtmlElement, bW as flattenDeepPlugins, a8 as getEventPlateId, aw as getHtmlComments, bY as getInjectedPlugins, bZ as getKeyByType, b_ as getKeysByTypes, b$ as getPlugin, c0 as getPluginInjectProps, c1 as getPluginOptions, c2 as getPluginType, c3 as getPluginTypes, c4 as getPlugins, c5 as getPluginsByKey, c6 as getRenderNodeProps, cv as getSlateClass, ax as htmlBodyToFragment, ay as htmlBrToNewLine, az as htmlElementToElement, aA as htmlElementToLeaf, aB as htmlStringToDOMNode, aC as htmlTextNodeToString, b5 as inferWhiteSpaceRule, aD as inlineTagNames, cg as isEventHandled, aE as isHtmlBlockElement, aF as isHtmlComment, aG as isHtmlElement, aH as isHtmlFragmentHref, aI as isHtmlInlineElement, aJ as isHtmlTable, aK as isHtmlText, b6 as isLastNonEmptyTextOfInlineFormattingContext, aL as isOlSymbol, c7 as mapInjectPropsToPlugin, c8 as mergeDeepPlugins, c9 as mergeDeepToNodes, ca as mockPlugin, cb as normalizeDescendantsToDocumentFragment, cc as normalizeInitialValue, cd as overridePluginsByKey, aM as parseHtmlDocument, aN as parseHtmlElement, ce as pipeDecorate, aO as pipeDeserializeHtmlElement, aP as pipeDeserializeHtmlLeaf, ch as pipeHandler, ci as pipeInjectProps, cj as pipeInsertDataQuery, ck as pipeInsertFragment, cl as pipeOnChange, cm as pipeTransformData, cn as pipeTransformFragment, aQ as pluginDeserializeHtml, cq as pluginInjectProps, aR as postCleanHtml, aS as preCleanHtml, aT as removeHtmlNodesBetweenComments, aU as removeHtmlSurroundings, aV as replaceTagName, bd as resetEditor, be as resetEditorChildren, cr as setDefaultPlugin, ct as sharedHotkeys, av as someHtmlElement, bg as toggleNodeType, aW as traverseHtmlComments, aX as traverseHtmlElements, aY as traverseHtmlNode, aZ as traverseHtmlTexts, a_ as unwrapHtmlElement, b7 as upsertInlineFormattingContext, a7 as useEventEditorSelectors, v as withEditorProtocol, cu as withHOC, F as withInlineVoid, I as withInsertData, S as withLength, z as withTHistory } from './createPlateEditor-DwSgi92n.mjs';
import * as _udecode_utils from '@udecode/utils';
export { nanoid } from 'nanoid';
export { StateActions as ZustandStateActions, StoreApi as ZustandStoreApi, createZustandStore } from 'zustand-x';
export { isHotkey } from 'is-hotkey';
import 'react';
import 'slate';
import 'slate-history';
import '@udecode/slate-utils';
import '@udecode/slate-react';
import 'slate-react';
import 'slate-react/dist/components/editable';
import 'jotai-x';
import 'jotai';

/**
 * Create a plate editor with:
 *
 * - `createTEditor` or custom `editor`
 * - `withPlate`
 * - Custom `components`
 */
declare const createPlateEditor: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>({ components, editor, normalizeInitialValue: shouldNormalizeInitialValue, overrideByKey, plugins, ...withPlateOptions }?: CreatePlateEditorOptions<V, E>) => E & PlateEditor<V>;

declare const withReact: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;
/** @see {@link withReact} with noop methods for server-side support. */
declare const createReactPlugin: <OP = _udecode_utils.AnyObject, OV extends Value = Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<PlatePlugin<NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: OverrideByKey<OV, OE>) => PlatePlugin<NoInfer<OP>, OV, OE>;

declare const setPlatePlugins: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { disableCorePlugins, maxLength, plugins: _plugins, }: Pick<PlateProps<V, E>, 'disableCorePlugins' | 'maxLength' | 'plugins'>) => void;

/** `withPlate` with server-side support. */
declare const withPlate: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>(e: E, { disableCorePlugins, id, maxLength, plugins, }?: WithPlateOptions<V, E & PlateEditor<V>>) => E & PlateEditor<V>;

export { NoInfer, OverrideByKey, PlateEditor, PlatePlugin, createPlateEditor, createReactPlugin, setPlatePlugins, withPlate, withReact };
