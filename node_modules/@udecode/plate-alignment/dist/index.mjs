var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/client/useAlignDropdownMenu.ts
import {
  focusEditor,
  useEditorRef,
  useEditorSelector
} from "@udecode/plate-common";
import { findNode, isCollapsed, isDefined } from "@udecode/plate-common/server";
var useAlignDropdownMenuState = () => {
  const value = useEditorSelector((editor) => {
    if (isCollapsed(editor.selection)) {
      const entry = findNode(editor, {
        match: (n) => isDefined(n[KEY_ALIGN])
      });
      if (entry) {
        const nodeValue = entry[0][KEY_ALIGN];
        if (nodeValue === "left")
          return "left";
        if (nodeValue === "center")
          return "center";
        if (nodeValue === "right")
          return "right";
        if (nodeValue === "end")
          return "end";
        if (nodeValue === "justify")
          return "justify";
      }
    }
    return "start";
  }, []);
  return {
    value
  };
};
var useAlignDropdownMenu = ({
  value
}) => {
  const editor = useEditorRef();
  return {
    radioGroupProps: {
      onValueChange: (newValue) => {
        setAlign(editor, {
          key: KEY_ALIGN,
          value: newValue
        });
        focusEditor(editor);
      },
      value
    }
  };
};

// src/shared/createAlignPlugin.ts
import {
  ELEMENT_DEFAULT,
  createPluginFactory,
  getPluginType,
  mapInjectPropsToPlugin
} from "@udecode/plate-common/server";
var KEY_ALIGN = "align";
var createAlignPlugin = createPluginFactory({
  key: KEY_ALIGN,
  then: (editor) => ({
    inject: {
      props: {
        defaultNodeValue: "start",
        nodeKey: KEY_ALIGN,
        styleKey: "textAlign",
        validNodeValues: ["start", "left", "center", "right", "end", "justify"],
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)]
      }
    },
    then: (_, plugin) => mapInjectPropsToPlugin(editor, plugin, {
      deserializeHtml: {
        getNode: (el, node) => {
          if (el.style.textAlign) {
            node[plugin.key] = el.style.textAlign;
          }
        }
      }
    })
  })
});

// src/shared/transforms/setAlign.ts
import {
  getPluginInjectProps,
  isBlock,
  setElements,
  unsetNodes
} from "@udecode/plate-common/server";
var setAlign = (editor, {
  key = KEY_ALIGN,
  setNodesOptions,
  value
}) => {
  const { defaultNodeValue, nodeKey, validTypes } = getPluginInjectProps(
    editor,
    key
  );
  const match = (n) => {
    return isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);
  };
  if (value === defaultNodeValue) {
    unsetNodes(editor, nodeKey, __spreadValues({
      match
    }, setNodesOptions));
  } else {
    setElements(
      editor,
      { [nodeKey]: value },
      __spreadValues({
        match
      }, setNodesOptions)
    );
  }
};
export {
  KEY_ALIGN,
  createAlignPlugin,
  setAlign,
  useAlignDropdownMenu,
  useAlignDropdownMenuState
};
//# sourceMappingURL=index.mjs.map