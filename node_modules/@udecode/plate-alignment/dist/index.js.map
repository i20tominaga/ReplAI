{"version":3,"sources":["../src/index.ts","../src/client/useAlignDropdownMenu.ts","../src/shared/createAlignPlugin.ts","../src/shared/transforms/setAlign.ts"],"sourcesContent":["/** @file Automatically generated by barrelsby. */\n\nexport * from './client/index';\nexport * from './shared/index';\n","import {\n  focusEditor,\n  useEditorRef,\n  useEditorSelector,\n} from '@udecode/plate-common';\nimport { findNode, isCollapsed, isDefined } from '@udecode/plate-common/server';\n\nimport { type Alignment, KEY_ALIGN, setAlign } from '../index';\n\nexport const useAlignDropdownMenuState = () => {\n  const value: Alignment = useEditorSelector((editor) => {\n    if (isCollapsed(editor.selection)) {\n      const entry = findNode(editor, {\n        match: (n) => isDefined(n[KEY_ALIGN]),\n      });\n\n      if (entry) {\n        const nodeValue = entry[0][KEY_ALIGN] as string;\n\n        if (nodeValue === 'left') return 'left';\n        if (nodeValue === 'center') return 'center';\n        if (nodeValue === 'right') return 'right';\n        if (nodeValue === 'end') return 'end';\n        if (nodeValue === 'justify') return 'justify';\n      }\n    }\n\n    return 'start';\n  }, []);\n\n  return {\n    value,\n  };\n};\n\nexport const useAlignDropdownMenu = ({\n  value,\n}: ReturnType<typeof useAlignDropdownMenuState>) => {\n  const editor = useEditorRef();\n\n  return {\n    radioGroupProps: {\n      onValueChange: (newValue: string) => {\n        setAlign(editor, {\n          key: KEY_ALIGN,\n          value: newValue as Alignment,\n        });\n\n        focusEditor(editor);\n      },\n      value,\n    },\n  };\n};\n","import {\n  ELEMENT_DEFAULT,\n  createPluginFactory,\n  getPluginType,\n  mapInjectPropsToPlugin,\n} from '@udecode/plate-common/server';\n\nexport const KEY_ALIGN = 'align';\n\n/** Creates a plugin that adds alignment functionality to the editor. */\nexport const createAlignPlugin = createPluginFactory({\n  key: KEY_ALIGN,\n  then: (editor) => ({\n    inject: {\n      props: {\n        defaultNodeValue: 'start',\n        nodeKey: KEY_ALIGN,\n        styleKey: 'textAlign',\n        validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n    then: (_, plugin) =>\n      mapInjectPropsToPlugin(editor, plugin, {\n        deserializeHtml: {\n          getNode: (el, node) => {\n            if (el.style.textAlign) {\n              node[plugin.key] = el.style.textAlign;\n            }\n          },\n        },\n      }),\n  }),\n});\n","import {\n  type ENode,\n  type PlateEditor,\n  type PlatePluginKey,\n  type SetNodesOptions,\n  type TNodeMatch,\n  type Value,\n  getPluginInjectProps,\n  isBlock,\n  setElements,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport type { Alignment } from '../types';\n\nimport { KEY_ALIGN } from '../createAlignPlugin';\n\nexport const setAlign = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    key = KEY_ALIGN,\n    setNodesOptions,\n    value,\n  }: { setNodesOptions?: SetNodesOptions<V>; value: Alignment } & PlatePluginKey\n) => {\n  const { defaultNodeValue, nodeKey, validTypes } = getPluginInjectProps(\n    editor,\n    key\n  );\n\n  const match: TNodeMatch<ENode<Value>> = (n) => {\n    return (\n      isBlock(editor, n) &&\n      !!validTypes &&\n      validTypes.includes(n.type as string)\n    );\n  };\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    setElements(\n      editor,\n      { [nodeKey!]: value },\n      {\n        match: match as any,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,0BAIO;AACP,oBAAiD;AAI1C,IAAM,4BAA4B,MAAM;AAC7C,QAAM,YAAmB,uCAAkB,CAAC,WAAW;AACrD,YAAI,2BAAY,OAAO,SAAS,GAAG;AACjC,YAAM,YAAQ,wBAAS,QAAQ;AAAA,QAC7B,OAAO,CAAC,UAAM,yBAAU,EAAE,SAAS,CAAC;AAAA,MACtC,CAAC;AAED,UAAI,OAAO;AACT,cAAM,YAAY,MAAM,CAAC,EAAE,SAAS;AAEpC,YAAI,cAAc;AAAQ,iBAAO;AACjC,YAAI,cAAc;AAAU,iBAAO;AACnC,YAAI,cAAc;AAAS,iBAAO;AAClC,YAAI,cAAc;AAAO,iBAAO;AAChC,YAAI,cAAc;AAAW,iBAAO;AAAA,MACtC;AAAA,IACF;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEO,IAAM,uBAAuB,CAAC;AAAA,EACnC;AACF,MAAoD;AAClD,QAAM,aAAS,kCAAa;AAE5B,SAAO;AAAA,IACL,iBAAiB;AAAA,MACf,eAAe,CAAC,aAAqB;AACnC,iBAAS,QAAQ;AAAA,UACf,KAAK;AAAA,UACL,OAAO;AAAA,QACT,CAAC;AAED,6CAAY,MAAM;AAAA,MACpB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACrDA,IAAAA,iBAKO;AAEA,IAAM,YAAY;AAGlB,IAAM,wBAAoB,oCAAoB;AAAA,EACnD,KAAK;AAAA,EACL,MAAM,CAAC,YAAY;AAAA,IACjB,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,kBAAkB;AAAA,QAClB,SAAS;AAAA,QACT,UAAU;AAAA,QACV,iBAAiB,CAAC,SAAS,QAAQ,UAAU,SAAS,OAAO,SAAS;AAAA,QACtE,YAAY,KAAC,8BAAc,QAAQ,8BAAe,CAAC;AAAA,MACrD;AAAA,IACF;AAAA,IACA,MAAM,CAAC,GAAG,eACR,uCAAuB,QAAQ,QAAQ;AAAA,MACrC,iBAAiB;AAAA,QACf,SAAS,CAAC,IAAI,SAAS;AACrB,cAAI,GAAG,MAAM,WAAW;AACtB,iBAAK,OAAO,GAAG,IAAI,GAAG,MAAM;AAAA,UAC9B;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACL;AACF,CAAC;;;ACjCD,IAAAC,iBAWO;AAMA,IAAM,WAAW,CACtB,QACA;AAAA,EACE,MAAM;AAAA,EACN;AAAA,EACA;AACF,MACG;AACH,QAAM,EAAE,kBAAkB,SAAS,WAAW,QAAI;AAAA,IAChD;AAAA,IACA;AAAA,EACF;AAEA,QAAM,QAAkC,CAAC,MAAM;AAC7C,eACE,wBAAQ,QAAQ,CAAC,KACjB,CAAC,CAAC,cACF,WAAW,SAAS,EAAE,IAAc;AAAA,EAExC;AAEA,MAAI,UAAU,kBAAkB;AAC9B,mCAAW,QAAQ,SAAU;AAAA,MAC3B;AAAA,OACG,gBACJ;AAAA,EACH,OAAO;AACL;AAAA,MACE;AAAA,MACA,EAAE,CAAC,OAAQ,GAAG,MAAM;AAAA,MACpB;AAAA,QACE;AAAA,SACG;AAAA,IAEP;AAAA,EACF;AACF;","names":["import_server","import_server"]}