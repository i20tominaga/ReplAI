import { Value, TEditor } from '@udecode/slate';
import { C as CreatePlateEditorOptions, b as PlateEditor, d as PlatePlugin, N as NoInfer, O as OverrideByKey, c as PlateProps, h as WithPlateOptions } from './createPlateEditor-BAxdLU1-.mjs';
export { bQ as ApplyDeepToNodesOptions, a7 as CARRIAGE_RETURN, aA as CollapseWhiteSpaceState, bq as DOMHandler, bp as DOMHandlerReturnType, br as DOMHandlers, bm as DOM_HANDLERS, bt as Decorate, bs as DecorateEntry, D as DefaultLeaf, bu as DeserializeHtml, af as DeserializeHtmlChildren, ag as DeserializeHtmlNodeReturnType, E as ELEMENT_DEFAULT, bk as EXPOSED_STORE_KEYS, a1 as EventEditorState, cn as GetInjectPropsOptions, co as GetInjectPropsReturnType, bn as HandlerReturnType, bv as HotkeyPlugin, cs as Hotkeys, by as InjectComponent, bw as InjectComponentProps, bx as InjectComponentReturnType, bA as InjectProps, bV as InjectedPlugin, K as KEY_DESERIALIZE_AST, ad as KEY_DESERIALIZE_HTML, t as KEY_EDITOR_PROTOCOL, $ as KEY_EVENT_EDITOR, y as KEY_HISTORY, B as KEY_INLINE_VOID, J as KEY_INSERT_DATA, Q as KEY_LENGTH, X as KEY_NODE_FACTORY, Z as KEY_PREV_SELECTION, bo as KeyboardEventHandler, bB as KeyboardHandler, bC as KeyboardHandlerReturnType, a8 as LINE_FEED, M as LengthPlugin, a9 as NO_BREAK_SPACE, bl as Nullable, bD as OnChange, P as PlateChangeKey, bf as PlateEditorMethods, bF as PlatePluginComponent, bH as PlatePluginInsertData, bG as PlatePluginInsertDataOptions, bJ as PlatePluginKey, bK as PlatePluginProps, bg as PlateRenderElementProps, bh as PlateRenderLeafProps, bi as PlateRenderNodeProps, bj as PlateStoreState, bI as PluginKey, bE as PluginOptions, bL as RenderAfterEditable, e as RenderElement, R as RenderElementFn, f as RenderLeaf, aa as SPACE, bM as SerializeHtml, ab as TAB, T as TEditableProps, bP as TRenderElementProps, bN as ToggleMarkPlugin, bd as ToggleNodeTypeOptions, bz as TransformOptions, az as TrimEndRule, ay as TrimStartRule, ax as WhiteSpaceRule, bO as WithOverride, W as WithPlatePlugin, ac as ZERO_WIDTH_SPACE, bR as applyDeepToNodes, ah as cleanHtmlBrElements, ai as cleanHtmlCrLf, aj as cleanHtmlEmptyElements, ak as cleanHtmlFontElements, al as cleanHtmlLinkElements, am as cleanHtmlTextNodes, an as collapseString, ao as collapseWhiteSpace, ap as collapseWhiteSpaceChildren, aq as collapseWhiteSpaceElement, ar as collapseWhiteSpaceNode, as as collapseWhiteSpaceText, ce as convertDomEventToSyntheticEvent, aB as copyBlockMarksToSpanChild, s as createDeserializeAstPlugin, ae as createDeserializeHtmlPlugin, x as createEditorProtocolPlugin, a0 as createEventEditorPlugin, A as createHistoryPlugin, cr as createHotkey, H as createInlineVoidPlugin, L as createInsertDataPlugin, V as createLengthPlugin, Y as createNodeFactoryPlugin, bS as createPluginFactory, bT as createPlugins, _ as createPrevSelectionPlugin, aC as deserializeHtml, aD as deserializeHtmlElement, aE as deserializeHtmlNode, aF as deserializeHtmlNodeChildren, aw as endInlineFormattingContext, a3 as eventEditorActions, a4 as eventEditorSelectors, a2 as eventEditorStore, aG as findHtmlElement, bU as flattenDeepPlugins, a6 as getEventPlateId, aI as getHtmlComments, bW as getInjectedPlugins, bX as getKeyByType, bY as getKeysByTypes, bZ as getPlugin, b_ as getPluginInjectProps, b$ as getPluginOptions, c0 as getPluginType, c1 as getPluginTypes, c2 as getPlugins, c3 as getPluginsByKey, c4 as getRenderNodeProps, c8 as getSlateClass, aJ as htmlBodyToFragment, aK as htmlBrToNewLine, aL as htmlElementToElement, aM as htmlElementToLeaf, aN as htmlStringToDOMNode, aO as htmlTextNodeToString, at as inferWhiteSpaceRule, aP as inlineTagNames, cf as isEventHandled, aQ as isHtmlBlockElement, aR as isHtmlComment, aS as isHtmlElement, aT as isHtmlFragmentHref, aU as isHtmlInlineElement, aV as isHtmlTable, aW as isHtmlText, au as isLastNonEmptyTextOfInlineFormattingContext, aX as isOlSymbol, c5 as mapInjectPropsToPlugin, c6 as mergeDeepPlugins, c7 as mergeDeepToNodes, c9 as mockPlugin, ca as normalizeDescendantsToDocumentFragment, cb as normalizeInitialValue, cc as overridePluginsByKey, aY as parseHtmlDocument, aZ as parseHtmlElement, cd as pipeDecorate, a_ as pipeDeserializeHtmlElement, a$ as pipeDeserializeHtmlLeaf, cg as pipeHandler, ch as pipeInjectProps, ci as pipeInsertDataQuery, cj as pipeInsertFragment, ck as pipeOnChange, cl as pipeTransformData, cm as pipeTransformFragment, b0 as pluginDeserializeHtml, cp as pluginInjectProps, b1 as postCleanHtml, b2 as preCleanHtml, b3 as removeHtmlNodesBetweenComments, b4 as removeHtmlSurroundings, b5 as replaceTagName, bb as resetEditor, bc as resetEditorChildren, cq as setDefaultPlugin, cs as sharedHotkeys, aH as someHtmlElement, be as toggleNodeType, b6 as traverseHtmlComments, b7 as traverseHtmlElements, b8 as traverseHtmlNode, b9 as traverseHtmlTexts, ba as unwrapHtmlElement, av as upsertInlineFormattingContext, a5 as useEventEditorSelectors, v as withEditorProtocol, ct as withHOC, F as withInlineVoid, I as withInsertData, S as withLength, z as withTHistory } from './createPlateEditor-BAxdLU1-.mjs';
import * as _udecode_utils from '@udecode/utils';
export { nanoid } from 'nanoid';
export { StateActions as ZustandStateActions, StoreApi as ZustandStoreApi, createZustandStore } from 'zustand-x';
export { isHotkey } from 'is-hotkey';
import 'react';
import 'slate';
import 'slate-history';
import '@udecode/slate-utils';
import '@udecode/slate-react';
import 'slate-react';
import 'slate-react/dist/components/editable';
import 'jotai-x';
import 'jotai';

/**
 * Create a plate editor with:
 *
 * - `createTEditor` or custom `editor`
 * - `withPlate`
 * - Custom `components`
 */
declare const createPlateEditor: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>({ components, editor, normalizeInitialValue: shouldNormalizeInitialValue, overrideByKey, plugins, ...withPlateOptions }?: CreatePlateEditorOptions<V, E>) => E & PlateEditor<V>;

declare const withReact: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;
/** @see {@link withReact} with noop methods for server-side support. */
declare const createReactPlugin: <OP = _udecode_utils.AnyObject, OV extends Value = Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<PlatePlugin<NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: OverrideByKey<OV, OE>) => PlatePlugin<NoInfer<OP>, OV, OE>;

declare const setPlatePlugins: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { disableCorePlugins, maxLength, plugins: _plugins, }: Pick<PlateProps<V, E>, 'disableCorePlugins' | 'maxLength' | 'plugins'>) => void;

/** `withPlate` with server-side support. */
declare const withPlate: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>(e: E, { disableCorePlugins, id, maxLength, plugins, }?: WithPlateOptions<V, E & PlateEditor<V>>) => E & PlateEditor<V>;

export { NoInfer, OverrideByKey, PlateEditor, PlatePlugin, createPlateEditor, createReactPlugin, setPlatePlugins, withPlate, withReact };
