{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/constants.ts","../src/createEmojiPlugin.ts","../src/utils/EmojiTriggeringController.ts","../src/utils/EmojiLibrary/EmojiFloatingGrid.ts","../src/utils/Grid/Grid.ts","../src/utils/Grid/GridSection.ts","../src/utils/EmojiLibrary/EmojiFloatingGridBuilder.ts","../src/utils/EmojiLibrary/EmojiFloatingLibrary.ts","../src/utils/EmojiLibrary/EmojiInlineLibrary.ts","../src/utils/EmojiPicker/EmojiPickerState.ts","../src/utils/EmojiPicker/useEmojiPicker.ts","../src/handlers/getEmojiOnInsert.ts","../src/utils/EmojiObserver.ts","../src/utils/IndexSearch/IndexSearch.ts","../src/utils/IndexSearch/EmojiFloatingIndexSearch.ts","../src/utils/IndexSearch/EmojiInlineIndexSearch.ts","../src/withEmoji.ts","../src/handlers/getEmojiOnSelectItem.ts","../src/handlers/getFindTriggeringInput.ts","../src/hooks/useEmojiCombobox.ts","../src/hooks/useEmojiDropdownMenuState.ts","../src/storage/LocalStorage.ts","../src/storage/FrequentEmojiStorage.ts"],"sourcesContent":["/** @file Automatically generated by barrelsby. */\n\nexport * from './constants';\nexport * from './createEmojiPlugin';\nexport * from './types';\nexport * from './withEmoji';\nexport * from './handlers/index';\nexport * from './hooks/index';\nexport * from './storage/index';\nexport * from './utils/index';\n","import type { TComboboxItem } from '@udecode/plate-combobox';\n\nimport type { IEmojiTriggeringController } from './utils/index';\n\ntype ReverseMap<T> = T[keyof T];\n\nexport type EmojiSettingsType = {\n  buttonSize: {\n    value: number;\n  };\n  categories: {\n    value?: EmojiCategoryList[];\n  };\n  perLine: {\n    value: number;\n  };\n  showFrequent: {\n    key?: string;\n    limit?: number;\n    prefix?: string;\n    value: boolean;\n  };\n};\n\nexport type EmojiItemData = {\n  emoji: string;\n  id: string;\n  name: string;\n  text: string;\n};\n\nexport type CreateEmoji<TData extends EmojiItemData = EmojiItemData> = (\n  data: TComboboxItem<TData>\n) => string;\n\nexport interface EmojiPlugin<TData extends EmojiItemData = EmojiItemData> {\n  createEmoji?: CreateEmoji<TData>;\n  emojiTriggeringController?: IEmojiTriggeringController;\n  id?: string;\n  trigger?: string;\n}\n\nexport const EmojiCategory = {\n  Activity: 'activity',\n  Custom: 'custom',\n  Flags: 'flags',\n  Foods: 'foods',\n  Frequent: 'frequent',\n  Nature: 'nature',\n  Objects: 'objects',\n  People: 'people',\n  Places: 'places',\n  Symbols: 'symbols',\n} as const;\n\nexport type EmojiCategoryList = ReverseMap<typeof EmojiCategory>;\n\nexport type i18nProps = {\n  categories: Record<EmojiCategoryList, string>;\n  clear: string;\n  pick: string;\n  search: string;\n  searchNoResultsSubtitle: string;\n  searchNoResultsTitle: string;\n  searchResult: string;\n  skins: Record<'1' | '2' | '3' | '4' | '5' | '6' | 'choose', string>;\n};\n\nexport type EmojiIconList<T = string> = {\n  categories: Record<EmojiCategoryList, { outline: T; solid: T }>;\n  search: {\n    delete: T;\n    loupe: T;\n  };\n};\n\nexport type FindTriggeringInputProps = {\n  action?: 'delete' | 'insert';\n  char?: string;\n};\n","import type {\n  EmojiTriggeringControllerOptions,\n  FrequentEmojis,\n} from './utils/index';\n\nimport {\n  EmojiCategory,\n  type EmojiCategoryList,\n  type EmojiSettingsType,\n  type i18nProps,\n} from './types';\n\nexport const KEY_EMOJI = 'emoji';\n\nexport const EMOJI_TRIGGER = ':';\n\nexport const EMOJI_MAX_SEARCH_RESULT = 60;\n\nexport const emojiTriggeringControllerOptions: EmojiTriggeringControllerOptions =\n  {\n    limitTriggeringChars: 2,\n    trigger: EMOJI_TRIGGER,\n  };\n\nexport const defaultCategories: EmojiCategoryList[] = [\n  EmojiCategory.People,\n  EmojiCategory.Nature,\n  EmojiCategory.Foods,\n  EmojiCategory.Activity,\n  EmojiCategory.Places,\n  EmojiCategory.Objects,\n  EmojiCategory.Symbols,\n  EmojiCategory.Flags,\n];\n\nexport const EmojiSettings: EmojiSettingsType = {\n  buttonSize: {\n    value: 36,\n  },\n  categories: {\n    value: undefined,\n  },\n  perLine: {\n    value: 8,\n  },\n  showFrequent: {\n    limit: 16,\n    value: true,\n  },\n};\n\nexport const DEFAULT_FREQUENTLY_USED_EMOJI: FrequentEmojis = {\n  '+1': 1,\n  clap: 1,\n  grinning: 1,\n  heart: 1,\n  heart_eyes: 1,\n  hugging_face: 1,\n  joy: 1,\n  kissing_heart: 1,\n  laughing: 1,\n  pray: 1,\n  rocket: 1,\n  scream: 1,\n  see_no_evil: 1,\n};\n\nexport const NUM_OF_CATEGORIES = Object.values(EmojiCategory).length;\n\nexport const i18n: i18nProps = {\n  categories: {\n    activity: 'Activity',\n    custom: 'Custom',\n    flags: 'Flags',\n    foods: 'Food & Drink',\n    frequent: 'Frequently used',\n    nature: 'Animals & Nature',\n    objects: 'Objects',\n    people: 'Smileys & People',\n    places: 'Travel & Places',\n    symbols: 'Symbols',\n  },\n  clear: 'Clear',\n  pick: 'Pick an emoji...',\n  search: 'Search all emoji',\n  searchNoResultsSubtitle: 'That emoji couldnâ€™t be found',\n  searchNoResultsTitle: 'Oh no!',\n  searchResult: 'Search Results',\n  skins: {\n    '1': 'Default',\n    '2': 'Light',\n    '3': 'Medium-Light',\n    '4': 'Medium',\n    '5': 'Medium-Dark',\n    '6': 'Dark',\n    choose: 'Choose default skin tone',\n  },\n};\n","import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport type { EmojiPlugin } from './types';\n\nimport { EMOJI_TRIGGER, KEY_EMOJI } from './constants';\nimport { EmojiTriggeringController } from './utils/index';\nimport { withEmoji } from './withEmoji';\n\nexport const createEmojiPlugin = createPluginFactory<EmojiPlugin>({\n  key: KEY_EMOJI,\n  options: {\n    createEmoji: (item) => item.data.emoji,\n    emojiTriggeringController: new EmojiTriggeringController(),\n    trigger: EMOJI_TRIGGER,\n  },\n  then: (\n    _,\n    { key, options: { createEmoji, emojiTriggeringController, trigger } }\n  ) => ({\n    options: {\n      createEmoji,\n      emojiTriggeringController,\n      id: key,\n      trigger,\n    },\n  }),\n  withOverrides: withEmoji,\n});\n","import { emojiTriggeringControllerOptions } from '../index';\n\nexport type EmojiTriggeringControllerOptions = {\n  limitTriggeringChars: number;\n  trigger: string;\n};\n\nexport interface IEmojiTriggeringController {\n  getText: () => string;\n  getTextSize: () => number;\n  hasEnclosingTriggeringMark: () => boolean;\n  hasTriggeringMark: boolean;\n  isTriggering: boolean;\n  reset: () => this;\n  setIsTriggering: (isTriggering: boolean) => this;\n  setText: (text: string) => this;\n}\n\nexport class EmojiTriggeringController implements IEmojiTriggeringController {\n  private _hasTriggeringMark = false;\n  private _isTriggering = false;\n  protected pos: any;\n  protected text = '';\n\n  constructor(\n    protected options: EmojiTriggeringControllerOptions = emojiTriggeringControllerOptions\n  ) {}\n\n  private endsWithEnclosingMark(text: string) {\n    return new RegExp(`${this.options.trigger}$`).test(text);\n  }\n\n  private startsWithTriggeringMark(text: string) {\n    return new RegExp(`^${this.options.trigger}`).test(text);\n  }\n\n  getText() {\n    return this.text.replaceAll(/^:|:$/g, '');\n  }\n\n  getTextSize() {\n    return this.text.length;\n  }\n\n  hasEnclosingTriggeringMark(): boolean {\n    return this.endsWithEnclosingMark(this.text);\n  }\n\n  reset() {\n    this.text = '';\n    this.setIsTriggering(false);\n    this._hasTriggeringMark = false;\n\n    return this;\n  }\n\n  setIsTriggering(isTriggering: boolean) {\n    this._isTriggering = isTriggering;\n\n    return this;\n  }\n\n  setText(text: string) {\n    this._hasTriggeringMark = this.startsWithTriggeringMark(text);\n\n    this.setIsTriggering(\n      this._hasTriggeringMark && text.length > this.options.limitTriggeringChars\n    );\n\n    this.text = this.isTriggering ? text : '';\n\n    return this;\n  }\n\n  get hasTriggeringMark(): boolean {\n    return this._hasTriggeringMark;\n  }\n\n  get isTriggering(): boolean {\n    return this._isTriggering;\n  }\n}\n","import React from 'react';\n\nimport type { EmojiCategoryList } from '../../types';\n\nimport { AGridSection, Grid, type IGrid } from '../Grid/index';\n\nexport type EmojiFloatingGridType = IGrid<\n  React.RefObject<HTMLDivElement>,\n  EmojiCategoryList\n>;\n\nexport class EmojiFloatingGrid extends Grid<\n  React.RefObject<HTMLDivElement>,\n  EmojiCategoryList\n> {\n  public createRootRef() {\n    return React.createRef<HTMLDivElement>();\n  }\n}\n\nexport class EmojiGridSectionWithRoot extends AGridSection<\n  React.RefObject<HTMLDivElement>,\n  EmojiCategoryList\n> {\n  protected createRootRef() {\n    this._root = React.createRef<HTMLDivElement>();\n  }\n}\n","import type {\n  GridElements,\n  IGrid,\n  IGridSection,\n  SectionElements,\n  SectionId,\n} from './Grid.types';\n\nexport class Grid<R, T extends SectionId = SectionId> implements IGrid<R, T> {\n  protected grid = new Map<T, IGridSection<R, T>>();\n  protected rowsCount = 1;\n  protected sectionsIds: T[] = [];\n\n  public addSection(\n    sectionId: T,\n    section: IGridSection<R, T>,\n    elements: GridElements\n  ) {\n    section.setIndexRowStart(this.rowsCount).addElements(elements[sectionId]);\n    this.rowsCount += section.rowsNum;\n    this.grid.set(sectionId, section);\n    this.sectionsIds.push(sectionId);\n\n    return this;\n  }\n\n  public indexOf(sectionId: T) {\n    return this.sectionsIds.indexOf(sectionId);\n  }\n\n  public section(sectionId: T) {\n    return this.grid.get(sectionId)!;\n  }\n\n  public sections() {\n    return Array.from(this.grid.values());\n  }\n\n  public updateSection(sectionId: T, elements: SectionElements) {\n    if (this.grid.has(sectionId)) {\n      const section = this.grid.get(sectionId);\n      section!.updateElements(elements);\n    }\n\n    return this;\n  }\n\n  public get size() {\n    return this.grid.size;\n  }\n}\n","import type {\n  GridRows,\n  IGridSection,\n  SectionElements,\n  SectionId,\n  Unknown,\n} from './Grid.types';\n\nexport abstract class AGridSection<R extends Unknown, T = SectionId>\n  implements IGridSection<R, T>\n{\n  protected _indexRowStart = 0;\n  protected _root!: R;\n  protected _rowsNum = 0;\n  protected rows: GridRows = [];\n\n  constructor(\n    protected _id: T,\n    protected perLine = 8\n  ) {\n    this.createRootRef();\n  }\n\n  private addRow(elements: SectionElements, lastPosition: number) {\n    const start = lastPosition * this.perLine;\n    const end = start + this.perLine;\n    this.rows.push({\n      elements: elements.slice(start, end),\n      id: this._indexRowStart + lastPosition,\n    });\n  }\n\n  private initRows(elements: SectionElements) {\n    let i = 0;\n\n    while (i < this.rowsNum) {\n      this.addRow(elements, i++);\n    }\n  }\n\n  public addElements(elements: SectionElements) {\n    this._rowsNum = Math.ceil(elements.length / this.perLine);\n    this.initRows(elements);\n\n    return this;\n  }\n\n  getRows() {\n    return this.rows;\n  }\n\n  public setIndexRowStart(start: number) {\n    this._indexRowStart = start;\n\n    return this;\n  }\n\n  public updateElements(elements: SectionElements) {\n    this.rows = [];\n    this.addElements(elements);\n\n    return this;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get root(): R {\n    return this._root;\n  }\n\n  get rowsNum() {\n    return this._rowsNum;\n  }\n\n  protected abstract createRootRef(): void;\n}\n","import type { EmojiCategoryList, EmojiSettingsType } from '../../types';\nimport type { GridElements } from '../Grid/index';\nimport type { IFrequentEmojiStorage } from './EmojiFloatingLibrary.types';\n\nimport {\n  EmojiFloatingGrid,\n  EmojiGridSectionWithRoot,\n} from './EmojiFloatingGrid';\n\nexport class EmojiFloatingGridBuilder {\n  protected grid = new EmojiFloatingGrid();\n\n  constructor(\n    protected localStorage: IFrequentEmojiStorage,\n    protected sections: EmojiCategoryList[],\n    protected elements: GridElements,\n    protected settings: EmojiSettingsType\n  ) {}\n\n  private addFrequent() {\n    if (this.settings.showFrequent.value) {\n      const id = 'frequent';\n      this.grid.addSection(\n        id,\n        new EmojiGridSectionWithRoot(id, this.settings.perLine.value),\n        {\n          [id]: this.localStorage.getList(),\n        }\n      );\n    }\n  }\n\n  public build() {\n    this.addFrequent();\n\n    this.sections.forEach((id) => {\n      this.grid.addSection(\n        id,\n        new EmojiGridSectionWithRoot(id, this.settings.perLine.value),\n        this.elements\n      );\n    });\n\n    return this.grid;\n  }\n}\n","import emojiMartData from '@emoji-mart/data' with { type: 'json' };\n\nimport type { EmojiFloatingGridType } from './EmojiFloatingGrid';\nimport type {\n  IEmojiFloatingLibrary,\n  IFrequentEmojiStorage,\n} from './EmojiFloatingLibrary.types';\nimport type { EmojiLibrary } from './EmojiLibrary.types';\n\nimport { defaultCategories } from '../../constants';\nimport {\n  EmojiCategory,\n  type EmojiCategoryList,\n  type EmojiSettingsType,\n} from '../../types';\nimport { EmojiFloatingGridBuilder } from './EmojiFloatingGridBuilder';\nimport { EmojiInlineLibrary } from './EmojiInlineLibrary';\n\nexport class EmojiFloatingLibrary\n  extends EmojiInlineLibrary\n  implements IEmojiFloatingLibrary\n{\n  private categories: EmojiCategoryList[] = defaultCategories;\n\n  private emojis: Partial<Record<EmojiCategoryList, string[]>> = {};\n  private grid: EmojiFloatingGridType;\n  private static instance?: EmojiFloatingLibrary;\n\n  private constructor(\n    protected settings: EmojiSettingsType,\n    protected localStorage: IFrequentEmojiStorage,\n    protected library: EmojiLibrary = emojiMartData as any\n  ) {\n    super(library);\n\n    this.categories = settings.categories.value ?? this.categories;\n\n    this.initEmojis(library.categories);\n\n    this.grid = new EmojiFloatingGridBuilder(\n      this.localStorage,\n      this.categories,\n      this.emojis,\n      settings\n    ).build();\n  }\n\n  public static getInstance(\n    settings: EmojiSettingsType,\n    localStorage: IFrequentEmojiStorage,\n    library: EmojiLibrary = emojiMartData as any\n  ) {\n    if (!EmojiFloatingLibrary.instance) {\n      EmojiFloatingLibrary.instance = new EmojiFloatingLibrary(\n        settings,\n        localStorage,\n        library\n      );\n    }\n\n    return EmojiFloatingLibrary.instance;\n  }\n\n  private initEmojis(categoriesLibrary: any) {\n    for (const category of categoriesLibrary) {\n      (this.emojis as any)[category.id] = category.emojis;\n    }\n  }\n\n  public getGrid() {\n    return this.grid;\n  }\n\n  public indexOf(focusedCategory: EmojiCategoryList) {\n    const index = this.grid.indexOf(focusedCategory);\n\n    return index < 1 ? 0 : index;\n  }\n\n  public updateFrequentCategory(emojiId: string) {\n    this.localStorage.update(emojiId);\n    this.grid.updateSection(\n      EmojiCategory.Frequent,\n      this.localStorage.getList()\n    );\n  }\n}\n","import emojiMartData from '@emoji-mart/data' with { type: 'json' };\n\nimport type {\n  Emoji,\n  EmojiLibrary,\n  Emojis,\n  IEmojiLibrary,\n} from './EmojiLibrary.types';\n\nexport type THash = Record<string, string>;\n\nexport class EmojiInlineLibrary implements IEmojiLibrary {\n  protected _emojis: Emojis;\n  protected _hash: THash = {};\n  protected _keys: string[] = [];\n\n  constructor(library: EmojiLibrary = emojiMartData as any) {\n    this._emojis = library.emojis;\n    this.init();\n  }\n\n  private createSearchableString(emoji: Emoji) {\n    const { id, keywords, name } = emoji;\n\n    return `${id},${this.getName(name)},${keywords.join(',')}`;\n  }\n\n  private getName(name: string) {\n    return name.toLowerCase().split(' ').join(',');\n  }\n\n  private init() {\n    Object.values(this._emojis).forEach((emoji) => {\n      const searchableString = this.createSearchableString(emoji);\n      this._keys.push(searchableString);\n      this._hash[searchableString] = emoji.id;\n    });\n  }\n\n  getEmoji(id: string) {\n    return this._emojis[id];\n  }\n\n  getEmojiId(key: string) {\n    return this._hash[key];\n  }\n\n  get keys(): string[] {\n    return this._keys;\n  }\n}\n","import React from 'react';\n\nimport type { Emoji } from '../EmojiLibrary/index';\n\nimport { EmojiCategory, type EmojiCategoryList } from '../../types';\n\nexport type MapEmojiCategoryList = Map<EmojiCategoryList, boolean>;\n\nexport type EmojiPickerStateProps = {\n  emoji?: Emoji;\n  focusedCategory?: EmojiCategoryList;\n  frequentEmoji?: string;\n  hasFound: boolean;\n  isOpen: boolean;\n  isSearching: boolean;\n  searchResult: Emoji[];\n  searchValue: string;\n  visibleCategories: MapEmojiCategoryList;\n};\n\nexport type EmojiPickerStateDispatch = {\n  payload?: Partial<EmojiPickerStateProps>;\n  type: string;\n};\n\nconst initialState: EmojiPickerStateProps = {\n  emoji: undefined,\n  focusedCategory: undefined,\n  frequentEmoji: undefined,\n  hasFound: false,\n  isOpen: false,\n  isSearching: false,\n  searchResult: [],\n  searchValue: '',\n  visibleCategories: new Map(),\n};\n\nexport const EmojiPickerState = (): [\n  EmojiPickerStateProps,\n  React.Dispatch<EmojiPickerStateDispatch>,\n] => {\n  const [cache, dispatch] = React.useReducer<\n    React.Reducer<EmojiPickerStateProps, EmojiPickerStateDispatch>\n  >((state, action) => {\n    const { payload, type } = action;\n\n    switch (type) {\n      case 'CLEAR_SEARCH': {\n        return {\n          ...state,\n          focusedCategory: EmojiCategory.Frequent,\n          hasFound: false,\n          isSearching: false,\n          searchValue: '',\n        };\n      }\n      case 'UPDATE_SEARCH_RESULT': {\n        return {\n          ...state,\n          ...payload,\n          focusedCategory: undefined,\n          isSearching: true,\n        };\n      }\n      case 'SET_FOCUSED_CATEGORY': {\n        return {\n          ...state,\n          ...payload,\n          hasFound: false,\n          isSearching: false,\n          searchValue: '',\n        };\n      }\n      case 'SET_OPEN': {\n        return {\n          ...state,\n          isOpen: true,\n        };\n      }\n      case 'SET_CLOSE': {\n        return {\n          ...state,\n          emoji: undefined,\n          isOpen: false,\n        };\n      }\n      case 'UPDATE_FREQUENT_EMOJIS': {\n        return {\n          ...state,\n          ...payload,\n          emoji: undefined,\n        };\n      }\n      case 'SET_SEARCH':\n      case 'SET_EMOJI':\n      case 'SET_FOCUSED_AND_VISIBLE_CATEGORIES': {\n        return { ...state, ...payload };\n      }\n      default: {\n        throw new Error(`Unhandled action type: ${type}`);\n      }\n    }\n  }, initialState);\n\n  return [cache, dispatch];\n};\n","import React from 'react';\n\nimport { useEditorRef } from '@udecode/plate-common';\n\nimport type {\n  EmojiCategoryList,\n  EmojiIconList,\n  EmojiSettingsType,\n  i18nProps,\n} from '../../types';\nimport type { Emoji, IEmojiFloatingLibrary } from '../EmojiLibrary/index';\nimport type { AIndexSearch } from '../IndexSearch/index';\n\nimport { i18n } from '../../constants';\nimport { getEmojiOnInsert } from '../../handlers/getEmojiOnInsert';\nimport {\n  type SetFocusedAndVisibleSectionsType,\n  observeCategories,\n} from '../EmojiObserver';\nimport {\n  EmojiPickerState,\n  type MapEmojiCategoryList,\n} from './EmojiPickerState';\n\nexport type MutableRefs = React.MutableRefObject<{\n  content: React.RefObject<HTMLDivElement> | undefined;\n  contentRoot: React.RefObject<HTMLDivElement> | undefined;\n}>;\n\nexport type UseEmojiPickerProps = {\n  closeOnSelect: boolean;\n  emojiLibrary: IEmojiFloatingLibrary;\n  indexSearch: AIndexSearch<Emoji>;\n};\n\nexport type UseEmojiPickerType<\n  T extends React.ReactElement = React.ReactElement,\n> = {\n  clearSearch: () => void;\n  emoji?: Emoji;\n  emojiLibrary: IEmojiFloatingLibrary;\n  focusedCategory?: EmojiCategoryList;\n  handleCategoryClick: (id: EmojiCategoryList) => void;\n  hasFound: boolean;\n  i18n: i18nProps;\n  icons: EmojiIconList<T>;\n  isOpen: boolean;\n  isSearching: boolean;\n  onMouseOver: (emoji?: Emoji) => void;\n  onSelectEmoji: (emoji: Emoji) => void;\n  refs: MutableRefs;\n  searchResult: Emoji[];\n  searchValue: string;\n  setIsOpen: (isOpen: boolean) => void;\n  setSearch: (value: string) => void;\n  settings?: EmojiSettingsType;\n  styles?: any;\n  visibleCategories: MapEmojiCategoryList;\n};\n\nexport const useEmojiPicker = ({\n  closeOnSelect,\n  emojiLibrary,\n  indexSearch,\n}: UseEmojiPickerProps): Omit<UseEmojiPickerType, 'icons' | 'settings'> => {\n  const editor = useEditorRef();\n\n  const [state, dispatch] = EmojiPickerState();\n  const refs = React.useRef({\n    content: React.createRef<HTMLDivElement>(),\n    contentRoot: React.createRef<HTMLDivElement>(),\n  });\n\n  const setIsOpen = React.useCallback(\n    (isOpen: boolean) => {\n      dispatch({\n        type: isOpen ? 'SET_OPEN' : 'SET_CLOSE',\n      });\n    },\n    [dispatch]\n  );\n\n  const setFocusedAndVisibleSections =\n    React.useCallback<SetFocusedAndVisibleSectionsType>(\n      (visibleSections, categoryId) => {\n        dispatch({\n          payload: {\n            focusedCategory: categoryId,\n            visibleCategories: visibleSections,\n          },\n          type: 'SET_FOCUSED_AND_VISIBLE_CATEGORIES',\n        });\n      },\n      [dispatch]\n    );\n\n  const handleSearchInput = React.useCallback(\n    (input: string) => {\n      const value = String(input).replaceAll(/\\s/g, '');\n\n      if (!value && !input) {\n        dispatch({ type: 'CLEAR_SEARCH' });\n\n        return;\n      }\n\n      const hasFound = indexSearch.search(value).hasFound();\n\n      dispatch({\n        payload: {\n          hasFound,\n          searchResult: indexSearch.get(),\n          searchValue: value,\n        },\n        type: 'UPDATE_SEARCH_RESULT',\n      });\n    },\n    [dispatch, indexSearch]\n  );\n\n  const setSearch = React.useCallback(\n    (value: string) => {\n      value ? handleSearchInput(value) : dispatch({ type: 'CLEAR_SEARCH' });\n    },\n    [dispatch, handleSearchInput]\n  );\n\n  const clearSearch = React.useCallback(() => {\n    dispatch({ type: 'CLEAR_SEARCH' });\n  }, [dispatch]);\n\n  const onMouseOver = React.useCallback(\n    (emoji?: Emoji) => {\n      dispatch({ payload: { emoji }, type: 'SET_EMOJI' });\n    },\n    [dispatch]\n  );\n\n  const updateFrequentEmojis = React.useCallback(\n    (emojiId: string) => {\n      emojiLibrary.updateFrequentCategory(emojiId);\n\n      dispatch({\n        payload: {\n          frequentEmoji: emojiId,\n          isOpen: closeOnSelect ? false : state.isOpen,\n        },\n        type: 'UPDATE_FREQUENT_EMOJIS',\n      });\n    },\n    [closeOnSelect, dispatch, emojiLibrary, state.isOpen]\n  );\n\n  const onSelectEmoji = React.useCallback(\n    (emoji: Emoji) => {\n      const selectItem = getEmojiOnInsert();\n      selectItem(editor, {\n        data: {\n          emoji: emoji.skins[0].native,\n          id: emoji.id,\n          name: emoji.name,\n          text: emoji.name,\n        },\n        key: emoji.id,\n        text: emoji.name,\n      });\n\n      updateFrequentEmojis(emoji.id);\n    },\n    [editor, updateFrequentEmojis]\n  );\n\n  const handleCategoryClick = React.useCallback(\n    (categoryId: EmojiCategoryList) => {\n      dispatch({\n        payload: { focusedCategory: categoryId },\n        type: 'SET_FOCUSED_CATEGORY',\n      });\n\n      const getSectionPositionToScrollIntoView = () => {\n        const trashHold = 1;\n        const section = emojiLibrary.getGrid().section(categoryId);\n\n        const contentRootScrollTop =\n          refs.current.contentRoot.current?.scrollTop ?? 0;\n        const contentRootTopPosition =\n          refs.current.contentRoot.current?.getBoundingClientRect().top ?? 0;\n        const sectionTopPosition =\n          section?.root.current?.getBoundingClientRect().top ?? 0;\n\n        return (\n          trashHold +\n          contentRootScrollTop +\n          sectionTopPosition -\n          contentRootTopPosition\n        );\n      };\n\n      if (refs.current.contentRoot.current) {\n        refs.current.contentRoot.current.scrollTop =\n          getSectionPositionToScrollIntoView();\n      }\n    },\n    [dispatch, emojiLibrary]\n  );\n\n  React.useEffect(() => {\n    if (state.isOpen && !state.isSearching) {\n      // Timeout to allow the category element refs to populate\n      setTimeout(() => {\n        observeCategories({\n          ancestorRef: refs.current.contentRoot,\n          emojiLibrary,\n          setFocusedAndVisibleSections,\n        });\n      }, 0);\n    }\n  }, [\n    emojiLibrary,\n    state.isOpen,\n    state.isSearching,\n    setFocusedAndVisibleSections,\n  ]);\n\n  return {\n    clearSearch,\n    emoji: state.emoji,\n    emojiLibrary,\n    handleCategoryClick,\n    i18n,\n    onMouseOver,\n    onSelectEmoji,\n    refs,\n    setIsOpen,\n    setSearch,\n    ...state,\n  };\n};\n","import type { ComboboxOnSelectItem } from '@udecode/plate-combobox';\n\nimport { focusEditor } from '@udecode/plate-common';\nimport {\n  type PlatePluginKey,\n  getPlugin,\n  insertText,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport type { EmojiItemData, EmojiPlugin } from '../types';\n\nimport { KEY_EMOJI } from '../constants';\n\nexport const getEmojiOnInsert =\n  <TData extends EmojiItemData = EmojiItemData>({\n    key = KEY_EMOJI,\n  }: PlatePluginKey = {}): ComboboxOnSelectItem<TData> =>\n  (editor, item) => {\n    const {\n      options: { createEmoji },\n    } = getPlugin<EmojiPlugin>(editor as any, key);\n\n    withoutNormalizing(editor, () => {\n      focusEditor(editor);\n\n      const value = createEmoji!(item);\n      insertText(editor, value);\n    });\n  };\n","import type React from 'react';\n\nimport type { EmojiCategoryList } from '../types';\nimport type { IEmojiFloatingLibrary } from './EmojiLibrary/index';\nimport type { MapEmojiCategoryList } from './EmojiPicker/index';\n\nconst setVisibleSections = (\n  entries: IntersectionObserverEntry[],\n  visibleSections: MapEmojiCategoryList\n) => {\n  for (const entry of entries) {\n    const id = (entry.target as HTMLDivElement).dataset.id as EmojiCategoryList;\n    visibleSections.set(id, entry.isIntersecting);\n  }\n};\n\nconst getSectionInFocus = (\n  visibleSections: MapEmojiCategoryList\n): EmojiCategoryList | undefined => {\n  for (const [id, ratio] of visibleSections) {\n    if (ratio) {\n      return id;\n    }\n  }\n};\n\nexport type SetFocusedAndVisibleSectionsType = (\n  visibleSections: MapEmojiCategoryList,\n  categoryId?: EmojiCategoryList\n) => void;\n\nexport type ObserverCategoriesType = {\n  ancestorRef: React.MutableRefObject<HTMLDivElement | null>;\n  emojiLibrary: IEmojiFloatingLibrary;\n  setFocusedAndVisibleSections: SetFocusedAndVisibleSectionsType;\n};\n\nexport const observeCategories = ({\n  ancestorRef,\n  emojiLibrary,\n  setFocusedAndVisibleSections,\n}: ObserverCategoriesType) => {\n  const observerOptions = {\n    root: ancestorRef.current,\n    threshold: 0,\n  };\n\n  const visibleSections: MapEmojiCategoryList = new Map();\n\n  const observer = new IntersectionObserver((entries) => {\n    setVisibleSections(entries, visibleSections);\n    const focusedSectionId = getSectionInFocus(visibleSections);\n\n    focusedSectionId &&\n      setFocusedAndVisibleSections(visibleSections, focusedSectionId);\n  }, observerOptions);\n\n  for (const section of emojiLibrary.getGrid().sections()) {\n    if (section.root.current) observer.observe(section.root.current);\n  }\n\n  return observer;\n};\n","import type { TComboboxItem } from '@udecode/plate-combobox';\n\nimport type { EmojiItemData } from '../../types';\nimport type { Emoji, IEmojiLibrary } from '../EmojiLibrary/index';\n\nimport { EMOJI_MAX_SEARCH_RESULT } from '../../constants';\n\ntype IndexSearchReturnData = TComboboxItem<EmojiItemData>;\n\ninterface IIndexSearch<R> {\n  get: () => R[];\n  hasFound: () => boolean;\n  search: (input: string) => void;\n}\n\nexport abstract class AIndexSearch<RData = IndexSearchReturnData>\n  implements IIndexSearch<RData>\n{\n  protected input: string | undefined;\n  protected maxResult = EMOJI_MAX_SEARCH_RESULT;\n  protected result: string[] = [];\n  protected scores = {};\n\n  protected constructor(protected library: IEmojiLibrary) {}\n\n  private createSearchResult(value: string) {\n    this.scores = {};\n    this.result = [];\n\n    for (const key of this.library!.keys) {\n      const score = key.indexOf(`${value}`);\n\n      if (score === -1) continue;\n\n      const emojiId = this.library!.getEmojiId(key);\n      this.result.push(emojiId);\n\n      (this.scores as any)[emojiId] || ((this.scores as any)[emojiId] = 0);\n      (this.scores as any)[emojiId] += emojiId === value ? 0 : score + 1;\n    }\n  }\n\n  private sortResultByScores(result: string[], scores: {}) {\n    result.sort((a, b) => {\n      const aScore = (scores as any)[a];\n      const bScore = (scores as any)[b];\n\n      if (aScore === bScore) {\n        return a.localeCompare(b);\n      }\n\n      return aScore - bScore;\n    });\n  }\n\n  get() {\n    const emojis = [];\n\n    for (const key of this.result) {\n      const emoji = this.library?.getEmoji(key);\n      emojis.push(this.transform(emoji!));\n\n      if (emojis.length >= this.maxResult) break;\n    }\n\n    return emojis;\n  }\n\n  getEmoji(): RData | undefined {\n    return this.get()[0];\n  }\n\n  hasFound(exact = false) {\n    if (exact && this.input) {\n      return this.result.includes(this.input);\n    }\n\n    return this.result.length > 0;\n  }\n\n  search(input: string): this {\n    this.input = input.toLowerCase();\n    const value = this.input;\n\n    if (value) {\n      this.createSearchResult(value);\n      this.sortResultByScores(this.result, this.scores);\n    } else {\n      this.scores = {};\n      this.result = [];\n    }\n\n    return this;\n  }\n\n  protected abstract transform(emoji: Emoji): RData;\n}\n","import type { Emoji, IEmojiLibrary } from '../EmojiLibrary/index';\n\nimport { AIndexSearch } from './IndexSearch';\n\nexport class EmojiFloatingIndexSearch extends AIndexSearch<Emoji> {\n  protected static instance?: EmojiFloatingIndexSearch;\n\n  private constructor(protected library: IEmojiLibrary) {\n    super(library);\n  }\n\n  public static getInstance(library: IEmojiLibrary) {\n    if (!EmojiFloatingIndexSearch.instance) {\n      EmojiFloatingIndexSearch.instance = new EmojiFloatingIndexSearch(library);\n    }\n\n    return EmojiFloatingIndexSearch.instance;\n  }\n\n  protected transform(emoji: Emoji) {\n    return emoji;\n  }\n}\n","import {\n  type Emoji,\n  EmojiInlineLibrary,\n  type IEmojiLibrary,\n} from '../EmojiLibrary/index';\nimport { AIndexSearch } from './IndexSearch';\n\nexport class EmojiInlineIndexSearch extends AIndexSearch {\n  protected static instance?: EmojiInlineIndexSearch;\n\n  private constructor(protected library: IEmojiLibrary) {\n    super(library);\n  }\n\n  public static getInstance() {\n    if (!EmojiInlineIndexSearch.instance) {\n      EmojiInlineIndexSearch.instance = new EmojiInlineIndexSearch(\n        new EmojiInlineLibrary()\n      );\n    }\n\n    return EmojiInlineIndexSearch.instance;\n  }\n\n  protected transform(emoji: Emoji) {\n    const { id, name, skins } = emoji;\n\n    return {\n      data: {\n        emoji: skins[0].native,\n        id,\n        name,\n        text: name,\n      },\n      key: id,\n      text: name,\n    };\n  }\n}\n","import { comboboxActions } from '@udecode/plate-combobox';\nimport {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  isCollapsed,\n} from '@udecode/plate-common/server';\n\nimport type { EmojiPlugin } from './types';\n\nimport { getEmojiOnSelectItem, getFindTriggeringInput } from './handlers/index';\nimport { EmojiInlineIndexSearch } from './utils/index';\n\nexport const withEmoji = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    options: { emojiTriggeringController, id },\n  }: WithPlatePlugin<EmojiPlugin, V, E>\n) => {\n  const emojiInlineIndexSearch = EmojiInlineIndexSearch.getInstance();\n\n  const findTheTriggeringInput = getFindTriggeringInput(\n    editor,\n    emojiTriggeringController!\n  );\n\n  const { apply, deleteBackward, deleteForward, insertText } = editor;\n\n  editor.insertText = (char) => {\n    const { selection } = editor;\n\n    if (!isCollapsed(selection)) {\n      return insertText(char);\n    }\n\n    findTheTriggeringInput({ char });\n\n    return insertText(char);\n  };\n\n  editor.deleteBackward = (unit) => {\n    findTheTriggeringInput({ action: 'delete' });\n\n    return deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    findTheTriggeringInput();\n\n    return deleteForward(unit);\n  };\n\n  editor.apply = (operation) => {\n    apply(operation);\n\n    if (!emojiTriggeringController?.hasTriggeringMark) {\n      return;\n    }\n\n    const searchText = emojiTriggeringController.getText();\n\n    switch (operation.type) {\n      case 'set_selection': {\n        emojiTriggeringController.reset();\n        comboboxActions.reset();\n\n        break;\n      }\n      case 'insert_text': {\n        if (\n          emojiTriggeringController.hasEnclosingTriggeringMark() &&\n          emojiInlineIndexSearch.search(searchText).hasFound(true)\n        ) {\n          const item = emojiInlineIndexSearch.getEmoji();\n          item && getEmojiOnSelectItem()(editor, item);\n\n          break;\n        }\n        if (\n          !emojiTriggeringController.hasEnclosingTriggeringMark() &&\n          emojiTriggeringController.isTriggering &&\n          emojiInlineIndexSearch.search(searchText).hasFound()\n        ) {\n          comboboxActions.items(\n            emojiInlineIndexSearch.search(searchText).get()\n          );\n          comboboxActions.open({\n            activeId: id!,\n            targetRange: editor.selection,\n            text: '',\n          });\n\n          break;\n        }\n\n        emojiTriggeringController.reset();\n        comboboxActions.reset();\n\n        break;\n      }\n      case 'remove_text': {\n        if (\n          emojiTriggeringController.isTriggering &&\n          emojiInlineIndexSearch.search(searchText).hasFound()\n        ) {\n          comboboxActions.items(\n            emojiInlineIndexSearch.search(searchText).get()\n          );\n          comboboxActions.open({\n            activeId: id!,\n            targetRange: editor.selection,\n            text: '',\n          });\n\n          break;\n        }\n\n        emojiTriggeringController.reset();\n        comboboxActions.reset();\n\n        break;\n      }\n    }\n  };\n\n  return editor;\n};\n","import {\n  type ComboboxOnSelectItem,\n  comboboxActions,\n} from '@udecode/plate-combobox';\nimport {\n  type PlatePluginKey,\n  deleteText,\n  getPlugin,\n  insertText,\n  withoutMergingHistory,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport type { EmojiItemData, EmojiPlugin } from '../types';\n\nimport { KEY_EMOJI } from '../constants';\n\nexport const getEmojiOnSelectItem =\n  <TData extends EmojiItemData = EmojiItemData>({\n    key = KEY_EMOJI,\n  }: PlatePluginKey = {}): ComboboxOnSelectItem<TData> =>\n  (editor, item) => {\n    const {\n      options: { createEmoji, emojiTriggeringController },\n    } = getPlugin<EmojiPlugin>(editor as any, key);\n\n    withoutNormalizing(editor, () => {\n      withoutMergingHistory(editor, () =>\n        deleteText(editor, {\n          distance: emojiTriggeringController!\n            .setIsTriggering(false)\n            .getTextSize(),\n          reverse: true,\n        })\n      );\n\n      const value = createEmoji!(item);\n      insertText(editor, value);\n    });\n\n    return comboboxActions.reset();\n  };\n","import type { BasePoint } from 'slate';\n\nimport {\n  type PlateEditor,\n  type Value,\n  getEditorString,\n  getPointBefore,\n  getRange,\n  isCollapsed,\n} from '@udecode/plate-common/server';\n\nimport type { FindTriggeringInputProps } from '../types';\nimport type { IEmojiTriggeringController } from '../utils/index';\n\nconst isSpaceBreak = (char?: string) => !!char && /\\s/.test(char);\n\nconst getPreviousChar = <V extends Value>(\n  editor: PlateEditor<V>,\n  point?: BasePoint\n) =>\n  point\n    ? getEditorString(\n        editor,\n        getRange(editor, point, getPointBefore(editor, point))\n      )\n    : undefined;\n\nconst getPreviousPoint = <V extends Value>(\n  editor: PlateEditor<V>,\n  point?: BasePoint\n) => (point ? getPointBefore(editor, point) : undefined);\n\nconst isBeginningOfTheLine = <V extends Value>(\n  editor: PlateEditor<V>,\n  point?: BasePoint\n) => {\n  const previousPoint = getPreviousPoint(editor, point);\n\n  return point?.path[0] !== previousPoint?.path[0];\n};\n\nexport const getFindTriggeringInput =\n  <V extends Value>(\n    editor: PlateEditor<V>,\n    emojiTriggeringController: IEmojiTriggeringController\n  ) =>\n  ({ action = 'insert', char = '' }: FindTriggeringInputProps = {}) => {\n    const { selection } = editor;\n\n    if (!selection || !isCollapsed(selection) || isSpaceBreak(char)) {\n      emojiTriggeringController.setIsTriggering(false);\n\n      return;\n    }\n\n    const startPoint = selection.anchor;\n    let currentPoint: BasePoint | undefined = startPoint;\n    let previousPoint;\n\n    let foundText = char;\n    let previousChar;\n\n    do {\n      previousChar = getPreviousChar(editor, currentPoint);\n      foundText = previousChar + foundText;\n      previousPoint = getPreviousPoint(editor, currentPoint);\n\n      if (isBeginningOfTheLine(editor, currentPoint)) {\n        break;\n      }\n\n      currentPoint = previousPoint;\n    } while (!isSpaceBreak(previousChar));\n\n    foundText = foundText.trim();\n\n    if (action === 'delete') foundText = foundText.slice(0, -1);\n\n    emojiTriggeringController.setText(foundText);\n  };\n","import type {\n  ComboboxOnSelectItem,\n  ComboboxProps,\n  Data,\n  NoData,\n} from '@udecode/plate-combobox';\n\nimport { useEditorRef } from '@udecode/plate-common';\nimport { getPluginOptions } from '@udecode/plate-common/server';\n\nimport { type EmojiPlugin, getEmojiOnSelectItem } from '../index';\n\nexport interface TEmojiCombobox<TData extends Data = NoData>\n  extends Partial<ComboboxProps<TData>> {\n  onSelectItem?: ComboboxOnSelectItem<TData> | null;\n  pluginKey?: string;\n}\n\nexport const useEmojiComboboxState = ({ pluginKey }: { pluginKey: string }) => {\n  const editor = useEditorRef();\n  const { trigger } = getPluginOptions<EmojiPlugin>(editor, pluginKey);\n\n  const onSelectItem = getEmojiOnSelectItem({ key: pluginKey });\n\n  return {\n    onSelectItem,\n    trigger: trigger!,\n  };\n};\n","import { useStableMemo } from '@udecode/plate-common';\n\nimport {\n  EmojiFloatingIndexSearch,\n  EmojiFloatingLibrary,\n  EmojiSettings,\n  type EmojiSettingsType,\n  FrequentEmojiStorage,\n  useEmojiPicker,\n} from '../index';\n\nexport type EmojiDropdownMenuOptions = {\n  closeOnSelect?: boolean;\n  settings?: EmojiSettingsType;\n};\n\nexport function useEmojiDropdownMenuState({\n  closeOnSelect = true,\n  settings = EmojiSettings,\n}: EmojiDropdownMenuOptions = {}) {\n  const [emojiLibrary, indexSearch] = useStableMemo(() => {\n    const frequentEmojiStorage = new FrequentEmojiStorage({\n      limit: settings.showFrequent.limit,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const emojiLibrary = EmojiFloatingLibrary.getInstance(\n      settings,\n      frequentEmojiStorage\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const indexSearch = EmojiFloatingIndexSearch.getInstance(emojiLibrary);\n\n    return [emojiLibrary, indexSearch] as const;\n  }, [settings]);\n\n  const { isOpen, setIsOpen, ...emojiPickerState } = useEmojiPicker({\n    closeOnSelect,\n    emojiLibrary,\n    indexSearch,\n  });\n\n  return {\n    emojiPickerState,\n    isOpen,\n    setIsOpen,\n  };\n}\n","export interface ILocalStorage<T> {\n  get: () => T;\n  set: (value: T) => void;\n}\n\nexport class LocalStorage<T> implements ILocalStorage<T> {\n  constructor(\n    protected key: string,\n    protected defaultValue: T\n  ) {}\n\n  get(): T {\n    let value = this.defaultValue;\n\n    if (typeof window === 'undefined') return value;\n\n    const valueInLocalStorage = window.localStorage.getItem(this.key);\n\n    if (valueInLocalStorage) {\n      try {\n        value = JSON.parse(valueInLocalStorage);\n      } catch {\n        window.localStorage.removeItem(this.key);\n      }\n    }\n\n    return value;\n  }\n\n  set(value: any) {\n    window.localStorage.setItem(this.key, JSON.stringify(value));\n  }\n}\n","import type {\n  FrequentEmojiStorageProps,\n  FrequentEmojis,\n  IFrequentEmojiStorage,\n} from '../utils/index';\n\nimport { DEFAULT_FREQUENTLY_USED_EMOJI } from '../constants';\nimport { EmojiCategory } from '../types';\nimport { LocalStorage } from './LocalStorage';\n\nexport class FrequentEmojiStorage implements IFrequentEmojiStorage {\n  protected key = EmojiCategory.Frequent;\n  protected limit = 8;\n  protected localStorage;\n  protected prefix = 'emoji';\n\n  constructor(\n    props: FrequentEmojiStorageProps,\n    protected defaultValue = DEFAULT_FREQUENTLY_USED_EMOJI\n  ) {\n    this.limit = props.limit ?? this.limit;\n    const key = `${props.prefix ?? this.prefix}:${props.key ?? this.key}`;\n    this.localStorage = new LocalStorage(key, defaultValue);\n  }\n\n  get(): FrequentEmojis {\n    const data = this.localStorage.get();\n\n    return Object.fromEntries(\n      Object.keys(data)\n        .sort((a, b) => data[b] - data[a])\n        .map((key) => [key, data[key]])\n    );\n  }\n\n  getList(): string[] {\n    return Object.keys(this.get()).splice(0, this.limit);\n  }\n\n  set(value: any) {\n    this.localStorage.set(value);\n  }\n\n  update(emojiId: string) {\n    const prevEmojis = this.localStorage.get();\n    const count = prevEmojis![emojiId] ? prevEmojis[emojiId] + 1 : 1;\n\n    const emojis: FrequentEmojis = {\n      ...prevEmojis,\n      [emojiId]: count,\n    };\n\n    this.localStorage.set(emojis);\n\n    return emojis;\n  }\n}\n"],"mappings":"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","names":["import_server","React","import_data","emojiMartData","emojiMartData","import_react","React","import_react","import_plate_common","React","import_plate_combobox","import_server","import_server","import_server","insertText","import_plate_common","import_server","import_plate_common","emojiLibrary","indexSearch"]}