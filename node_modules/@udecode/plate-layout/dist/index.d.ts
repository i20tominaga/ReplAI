import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { HotkeyPlugin, Value, PlateEditor, KeyboardHandlerReturnType, TNode, TNodeEntry, InsertNodesOptions } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import { TElement } from '@udecode/plate-common';
import { PathRef } from 'slate';

declare const useColumnState: () => {
    setDoubleColumn: () => void;
    setDoubleSideDoubleColumn: () => void;
    setLeftSideDoubleColumn: () => void;
    setRightSideDoubleColumn: () => void;
    setThreeColumn: () => void;
};

declare const ELEMENT_COLUMN_GROUP = "column_group";
declare const ELEMENT_COLUMN = "column";
declare const createColumnPlugin: <OP = HotkeyPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const onKeyDownColumn: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => KeyboardHandlerReturnType;

interface TColumnElement extends TElement {
    type: 'column';
    width: string;
    id?: string;
}
interface TColumnGroupElement extends TElement {
    children: TColumnElement[];
    type: 'column_group';
    id?: string;
    layout?: number[];
}

declare const withColumn: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;

declare const useDebouncePopoverOpen: () => boolean;

declare const normalizeColumn: <V extends Value, N extends TNode>(editor: PlateEditor<V>) => (entry: TNodeEntry<N>) => void;

declare const insertColumnGroup: <V extends Value>(editor: PlateEditor<V>) => void;

declare const insertEmptyColumn: <V extends Value>(editor: PlateEditor<V>, options?: {
    width?: string;
} & InsertNodesOptions<V>) => void;

/**
 * Move the middle column to the left of right by options.direction. if the
 * middle node is empty return false and remove it.
 */
declare const moveMiddleColumn: <V extends Value, N extends TNode>(editor: PlateEditor<V>, [node, path]: TNodeEntry<N>, options?: {
    direction: 'left' | 'right';
}) => false | undefined;

declare const setColumnWidth: <V extends Value>(editor: PlateEditor<V>, groupPathRef: PathRef, layout: Required<TColumnGroupElement>['layout']) => void;

export { ELEMENT_COLUMN, ELEMENT_COLUMN_GROUP, type TColumnElement, type TColumnGroupElement, createColumnPlugin, insertColumnGroup, insertEmptyColumn, moveMiddleColumn, normalizeColumn, onKeyDownColumn, setColumnWidth, useColumnState, useDebouncePopoverOpen, withColumn };
