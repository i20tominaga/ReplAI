"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ELEMENT_COLUMN: () => ELEMENT_COLUMN,
  ELEMENT_COLUMN_GROUP: () => ELEMENT_COLUMN_GROUP,
  createColumnPlugin: () => createColumnPlugin,
  insertColumnGroup: () => insertColumnGroup,
  insertEmptyColumn: () => insertEmptyColumn,
  moveMiddleColumn: () => moveMiddleColumn,
  normalizeColumn: () => normalizeColumn,
  onKeyDownColumn: () => onKeyDownColumn,
  setColumnWidth: () => setColumnWidth,
  useColumnState: () => useColumnState,
  useDebouncePopoverOpen: () => useDebouncePopoverOpen,
  withColumn: () => withColumn
});
module.exports = __toCommonJS(src_exports);

// src/column-store.ts
var import_plate_common = require("@udecode/plate-common");
var import_server9 = require("@udecode/plate-common/server");

// src/createColumnPlugin.ts
var import_server8 = require("@udecode/plate-common/server");

// src/onKeyDownColumn.ts
var import_server = require("@udecode/plate-common/server");
var onKeyDownColumn = (editor) => (e) => {
  if (e.defaultPrevented)
    return;
  const at = editor.selection;
  if ((0, import_server.isHotkey)("mod+a", e) && at) {
    const selectionParent = (0, import_server.getParentNode)(editor, at);
    if (!selectionParent)
      return;
    const [, parentPath] = selectionParent;
    parentPath.pop();
    (0, import_server.select)(editor, parentPath);
    e.preventDefault();
    e.stopPropagation();
  }
};

// src/withColumn.ts
var import_server7 = require("@udecode/plate-common/server");

// src/normalizers/normalizedColumn.ts
var import_server6 = require("@udecode/plate-common/server");

// src/transforms/insertColumnGroup.ts
var import_server2 = require("@udecode/plate-common/server");
var insertColumnGroup = (editor) => {
  (0, import_server2.withoutNormalizing)(editor, () => {
    (0, import_server2.insertNodes)(editor, {
      children: [
        {
          children: [{ children: [{ text: "" }], type: import_server2.ELEMENT_DEFAULT }],
          type: ELEMENT_COLUMN,
          width: "50%"
        },
        {
          children: [{ children: [{ text: "" }], type: import_server2.ELEMENT_DEFAULT }],
          type: ELEMENT_COLUMN,
          width: "50%"
        }
      ],
      layout: [50, 50],
      type: ELEMENT_COLUMN_GROUP
    });
  });
};

// src/transforms/insertEmptyColumn.ts
var import_server3 = require("@udecode/plate-common/server");
var insertEmptyColumn = (editor, options) => {
  const width = (options == null ? void 0 : options.width) || "33%";
  (0, import_server3.insertNodes)(
    editor,
    {
      children: [{ children: [{ text: "" }], type: import_server3.ELEMENT_DEFAULT }],
      type: ELEMENT_COLUMN,
      width
    },
    (0, import_server3.getQueryOptions)(editor, options)
  );
};

// src/transforms/moveMiddleColumn.ts
var import_server4 = require("@udecode/plate-common/server");
var import_slate = require("slate");
var moveMiddleColumn = (editor, [node, path], options) => {
  const direction = (options == null ? void 0 : options.direction) || "left";
  if (direction === "left") {
    const DESCENDANT_PATH = [1];
    const middleChildNode = import_slate.Node.get(node, DESCENDANT_PATH);
    const isEmpty = editor.isEmpty(middleChildNode);
    const middleChildPathRef = editor.pathRef(path.concat(DESCENDANT_PATH));
    if (isEmpty) {
      (0, import_server4.removeNodes)(editor, { at: middleChildPathRef.current });
      return false;
    }
    const firstNode = import_slate.Node.descendant(node, [0]);
    const firstLast = path.concat([0, firstNode.children.length]);
    (0, import_server4.moveNodes)(editor, { at: middleChildPathRef.current, to: firstLast });
    (0, import_server4.unwrapNodes)(editor, { at: middleChildPathRef.current });
    middleChildPathRef.unref();
  }
};

// src/transforms/setColumnWidth.ts
var import_server5 = require("@udecode/plate-common/server");
var setColumnWidth = (editor, groupPathRef, layout) => {
  const path = groupPathRef.unref();
  const columnGroup = (0, import_server5.getNodeEntry)(editor, path);
  if (!columnGroup)
    throw new Error(`can not find the column group in ${path}`);
  const children = (0, import_server5.getChildren)(columnGroup);
  const childPaths = Array.from(children, (item) => item[1]);
  childPaths.forEach((item, index) => {
    const width = layout[index] + "%";
    if (!width)
      return;
    (0, import_server5.setNodes)(
      editor,
      { width },
      {
        at: item,
        match: (n) => (0, import_server5.isElement)(n) && n.type === ELEMENT_COLUMN
      }
    );
  });
};

// src/normalizers/normalizedColumn.ts
var normalizeColumn = (editor) => {
  const { normalizeNode } = editor;
  return function(entry) {
    if ((0, import_server6.isElement)(entry[0]) && entry[0].type === ELEMENT_COLUMN_GROUP) {
      return normalizeColumnHelper(
        editor,
        entry
      );
    }
    return normalizeNode(entry);
  };
};
var normalizeColumnHelper = (editor, entry) => {
  const [node, path] = entry;
  const prevChildrenCnt = node.children.length;
  const currentLayout = node.layout;
  if (!currentLayout)
    return;
  const currentChildrenCnt = currentLayout.length;
  const groupPathRef = (0, import_server6.createPathRef)(editor, path);
  if (prevChildrenCnt === 2 && currentChildrenCnt === 3) {
    const lastChildPath = (0, import_server6.getLastChildPath)(entry);
    insertEmptyColumn(editor, {
      at: lastChildPath
    });
    setColumnWidth(editor, groupPathRef, currentLayout);
  }
  if (prevChildrenCnt === 3 && currentChildrenCnt === 2) {
    moveMiddleColumn(editor, entry, { direction: "left" });
    setColumnWidth(editor, groupPathRef, currentLayout);
  }
  if (prevChildrenCnt === currentChildrenCnt) {
    setColumnWidth(editor, groupPathRef, currentLayout);
  }
};

// src/withColumn.ts
var withColumn = (editor) => {
  const { deleteBackward, isEmpty } = editor;
  editor.normalizeNode = normalizeColumn(editor);
  editor.deleteBackward = (unit) => {
    var _a;
    if ((0, import_server7.isCollapsed)(editor.selection)) {
      const entry = (0, import_server7.getAboveNode)(editor, {
        match: (n) => (0, import_server7.isElement)(n) && n.type === ELEMENT_COLUMN
      });
      if (entry) {
        const [node, path] = entry;
        if (node.children.length > 1)
          return deleteBackward(unit);
        const isStart = (0, import_server7.isStartPoint)(editor, (_a = editor.selection) == null ? void 0 : _a.anchor, path);
        if (isStart)
          return;
      }
    }
    deleteBackward(unit);
  };
  editor.isEmpty = (element) => {
    if ((element == null ? void 0 : element.type) && element.type === ELEMENT_COLUMN) {
      return element.children.length === 1 && isEmpty(element.children[0]);
    }
    return isEmpty(element);
  };
  return editor;
};

// src/createColumnPlugin.ts
var ELEMENT_COLUMN_GROUP = "column_group";
var ELEMENT_COLUMN = "column";
var createColumnPlugin = (0, import_server8.createPluginFactory)({
  handlers: {
    onKeyDown: onKeyDownColumn
  },
  isElement: true,
  key: ELEMENT_COLUMN_GROUP,
  options: {},
  plugins: [
    {
      isElement: true,
      key: ELEMENT_COLUMN,
      withOverrides: withColumn
    }
  ]
});

// src/column-store.ts
var useColumnState = () => {
  const editor = (0, import_plate_common.useEditorRef)();
  const columnGroupElement = (0, import_plate_common.useElement)(ELEMENT_COLUMN_GROUP);
  const columnPath = (0, import_plate_common.findNodePath)(editor, columnGroupElement);
  const setDoubleColumn = () => {
    (0, import_server9.setNodes)(editor, { layout: [50, 50] }, { at: columnPath });
  };
  const setThreeColumn = () => {
    (0, import_server9.setNodes)(editor, { layout: [33, 33, 33] }, { at: columnPath });
  };
  const setRightSideDoubleColumn = () => {
    (0, import_server9.setNodes)(editor, { layout: [70, 30] }, { at: columnPath });
  };
  const setLeftSideDoubleColumn = () => {
    (0, import_server9.setNodes)(editor, { layout: [30, 70] }, { at: columnPath });
  };
  const setDoubleSideDoubleColumn = () => {
    (0, import_server9.setNodes)(editor, { layout: [25, 50, 25] }, { at: columnPath });
  };
  return {
    setDoubleColumn,
    setDoubleSideDoubleColumn,
    setLeftSideDoubleColumn,
    setRightSideDoubleColumn,
    setThreeColumn
  };
};

// src/hooks/useDebouncePopoverOpen.ts
var import_plate_common2 = require("@udecode/plate-common");
var import_server10 = require("@udecode/plate-common/server");
var import_slate_react = require("slate-react");
var useDebouncePopoverOpen = () => {
  const readOnly = (0, import_slate_react.useReadOnly)();
  const selected = (0, import_slate_react.useSelected)();
  const selectionCollapsed = (0, import_plate_common2.useEditorSelector)(
    (editor) => (0, import_server10.isCollapsed)(editor.selection),
    []
  );
  return !readOnly && selected && selectionCollapsed;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ELEMENT_COLUMN,
  ELEMENT_COLUMN_GROUP,
  createColumnPlugin,
  insertColumnGroup,
  insertEmptyColumn,
  moveMiddleColumn,
  normalizeColumn,
  onKeyDownColumn,
  setColumnWidth,
  useColumnState,
  useDebouncePopoverOpen,
  withColumn
});
//# sourceMappingURL=index.js.map