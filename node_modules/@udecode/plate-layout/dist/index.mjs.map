{"version":3,"sources":["../src/column-store.ts","../src/createColumnPlugin.ts","../src/onKeyDownColumn.ts","../src/withColumn.ts","../src/normalizers/normalizedColumn.ts","../src/transforms/insertColumnGroup.ts","../src/transforms/insertEmptyColumn.ts","../src/transforms/moveMiddleColumn.ts","../src/transforms/setColumnWidth.ts","../src/hooks/useDebouncePopoverOpen.ts"],"sourcesContent":["import { findNodePath, useEditorRef, useElement } from '@udecode/plate-common';\nimport { setNodes } from '@udecode/plate-common/server';\n\nimport type { TColumnGroupElement } from './types';\n\nimport { ELEMENT_COLUMN_GROUP } from './createColumnPlugin';\n\nexport const useColumnState = () => {\n  const editor = useEditorRef();\n\n  const columnGroupElement =\n    useElement<TColumnGroupElement>(ELEMENT_COLUMN_GROUP);\n\n  const columnPath = findNodePath(editor, columnGroupElement);\n\n  const setDoubleColumn = () => {\n    setNodes(editor, { layout: [50, 50] }, { at: columnPath });\n  };\n\n  const setThreeColumn = () => {\n    setNodes(editor, { layout: [33, 33, 33] }, { at: columnPath });\n  };\n\n  const setRightSideDoubleColumn = () => {\n    setNodes(editor, { layout: [70, 30] }, { at: columnPath });\n  };\n\n  const setLeftSideDoubleColumn = () => {\n    setNodes(editor, { layout: [30, 70] }, { at: columnPath });\n  };\n\n  const setDoubleSideDoubleColumn = () => {\n    setNodes(editor, { layout: [25, 50, 25] }, { at: columnPath });\n  };\n\n  return {\n    setDoubleColumn,\n    setDoubleSideDoubleColumn,\n    setLeftSideDoubleColumn,\n    setRightSideDoubleColumn,\n    setThreeColumn,\n  };\n};\n","import {\n  type HotkeyPlugin,\n  createPluginFactory,\n} from '@udecode/plate-common/server';\n\nimport { onKeyDownColumn } from './onKeyDownColumn';\nimport { withColumn } from './withColumn';\n\nexport const ELEMENT_COLUMN_GROUP = 'column_group';\n\nexport const ELEMENT_COLUMN = 'column';\n\nexport const createColumnPlugin = createPluginFactory<HotkeyPlugin>({\n  handlers: {\n    onKeyDown: onKeyDownColumn,\n  },\n  isElement: true,\n  key: ELEMENT_COLUMN_GROUP,\n  options: {},\n  plugins: [\n    {\n      isElement: true,\n      key: ELEMENT_COLUMN,\n      withOverrides: withColumn,\n    },\n  ],\n});\n","import {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type Value,\n  getParentNode,\n  isHotkey,\n  select,\n} from '@udecode/plate-common/server';\n\nexport const onKeyDownColumn =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n\n    const at = editor.selection;\n\n    if (isHotkey('mod+a', e) && at) {\n      const selectionParent = getParentNode(editor, at);\n\n      if (!selectionParent) return;\n\n      const [, parentPath] = selectionParent;\n      parentPath.pop();\n\n      select(editor, parentPath);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n","import {\n  type PlateEditor,\n  type Value,\n  getAboveNode,\n  isCollapsed,\n  isElement,\n  isStartPoint,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_COLUMN } from './createColumnPlugin';\nimport { normalizeColumn } from './normalizers/normalizedColumn';\n\nexport const withColumn = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const { deleteBackward, isEmpty } = editor;\n\n  editor.normalizeNode = normalizeColumn(editor);\n\n  editor.deleteBackward = (unit) => {\n    if (isCollapsed(editor.selection)) {\n      const entry = getAboveNode(editor, {\n        match: (n) => isElement(n) && n.type === ELEMENT_COLUMN,\n      });\n\n      if (entry) {\n        const [node, path] = entry;\n\n        if (node.children.length > 1) return deleteBackward(unit);\n\n        const isStart = isStartPoint(editor, editor.selection?.anchor, path);\n\n        if (isStart) return;\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.isEmpty = (element: any) => {\n    if (element?.type && element.type === ELEMENT_COLUMN) {\n      return element.children.length === 1 && isEmpty(element.children[0]);\n    }\n\n    return isEmpty(element);\n  };\n\n  return editor;\n};\n","import {\n  type PlateEditor,\n  type TNode,\n  type TNodeEntry,\n  type Value,\n  createPathRef,\n  getLastChildPath,\n  isElement,\n} from '@udecode/plate-common/server';\n\nimport type { TColumnGroupElement } from '../types';\n\nimport { ELEMENT_COLUMN_GROUP } from '../createColumnPlugin';\nimport { moveMiddleColumn } from '../transforms';\nimport { insertEmptyColumn } from '../transforms/insertEmptyColumn';\nimport { setColumnWidth } from '../transforms/setColumnWidth';\n\nexport const normalizeColumn = <V extends Value, N extends TNode>(\n  editor: PlateEditor<V>\n) => {\n  const { normalizeNode } = editor;\n\n  return function (entry: TNodeEntry<N>) {\n    if (isElement(entry[0]) && entry[0].type === ELEMENT_COLUMN_GROUP) {\n      return normalizeColumnHelper(\n        editor,\n        entry as unknown as TNodeEntry<TColumnGroupElement>\n      );\n    }\n\n    return normalizeNode(entry);\n  };\n};\n\nconst normalizeColumnHelper = <V extends Value, N extends TColumnGroupElement>(\n  editor: PlateEditor<V>,\n  entry: TNodeEntry<N>\n) => {\n  const [node, path] = entry;\n\n  const prevChildrenCnt = node.children.length;\n  const currentLayout = node.layout;\n\n  if (!currentLayout) return;\n\n  const currentChildrenCnt = currentLayout.length;\n\n  const groupPathRef = createPathRef(editor, path);\n\n  if (prevChildrenCnt === 2 && currentChildrenCnt === 3) {\n    const lastChildPath = getLastChildPath(entry);\n\n    insertEmptyColumn(editor, {\n      at: lastChildPath,\n    });\n\n    setColumnWidth(editor, groupPathRef, currentLayout);\n  }\n  if (prevChildrenCnt === 3 && currentChildrenCnt === 2) {\n    moveMiddleColumn(editor, entry, { direction: 'left' });\n    setColumnWidth(editor, groupPathRef, currentLayout);\n  }\n  if (prevChildrenCnt === currentChildrenCnt) {\n    setColumnWidth(editor, groupPathRef, currentLayout);\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type Value,\n  insertNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport type { TColumnGroupElement } from '../types';\n\nimport { ELEMENT_COLUMN, ELEMENT_COLUMN_GROUP } from '../createColumnPlugin';\n\nexport const insertColumnGroup = <V extends Value>(editor: PlateEditor<V>) => {\n  withoutNormalizing(editor, () => {\n    insertNodes<TColumnGroupElement>(editor, {\n      children: [\n        {\n          children: [{ children: [{ text: '' }], type: ELEMENT_DEFAULT }],\n          type: ELEMENT_COLUMN,\n          width: '50%',\n        },\n        {\n          children: [{ children: [{ text: '' }], type: ELEMENT_DEFAULT }],\n          type: ELEMENT_COLUMN,\n          width: '50%',\n        },\n      ],\n      layout: [50, 50],\n      type: ELEMENT_COLUMN_GROUP,\n    });\n  });\n};\n","import {\n  ELEMENT_DEFAULT,\n  type InsertNodesOptions,\n  type PlateEditor,\n  type Value,\n  getQueryOptions,\n  insertNodes,\n} from '@udecode/plate-common/server';\n\nimport type { TColumnElement } from '../types';\n\nimport { ELEMENT_COLUMN } from '../createColumnPlugin';\n\nexport const insertEmptyColumn = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: { width?: string } & InsertNodesOptions<V>\n) => {\n  const width = options?.width || '33%';\n\n  insertNodes<TColumnElement>(\n    editor,\n    {\n      children: [{ children: [{ text: '' }], type: ELEMENT_DEFAULT }],\n      type: ELEMENT_COLUMN,\n      width,\n    },\n    getQueryOptions(editor, options)\n  );\n};\n","import {\n  type PlateEditor,\n  type TNode,\n  type TNodeEntry,\n  type Value,\n  moveNodes,\n  removeNodes,\n  unwrapNodes,\n} from '@udecode/plate-common/server';\nimport { Node } from 'slate';\n\nimport type { TColumnElement } from '../types';\n\n/**\n * Move the middle column to the left of right by options.direction. if the\n * middle node is empty return false and remove it.\n */\nexport const moveMiddleColumn = <V extends Value, N extends TNode>(\n  editor: PlateEditor<V>,\n  [node, path]: TNodeEntry<N>,\n  options?: {\n    direction: 'left' | 'right';\n  }\n) => {\n  const direction = options?.direction || 'left';\n\n  if (direction === 'left') {\n    const DESCENDANT_PATH = [1];\n\n    const middleChildNode = Node.get(node, DESCENDANT_PATH);\n    const isEmpty = editor.isEmpty(middleChildNode as any);\n\n    const middleChildPathRef = editor.pathRef(path.concat(DESCENDANT_PATH));\n\n    if (isEmpty) {\n      removeNodes(editor, { at: middleChildPathRef.current! });\n\n      return false;\n    }\n\n    const firstNode = Node.descendant(node, [0]) as TColumnElement;\n\n    const firstLast = path.concat([0, firstNode.children.length]);\n\n    moveNodes(editor, { at: middleChildPathRef.current!, to: firstLast });\n    unwrapNodes(editor, { at: middleChildPathRef.current! });\n    middleChildPathRef.unref();\n  }\n};\n","import type { PathRef } from 'slate';\n\nimport {\n  type PlateEditor,\n  type Value,\n  getChildren,\n  getNodeEntry,\n  isElement,\n  setNodes,\n} from '@udecode/plate-common/server';\n\nimport type { TColumnElement, TColumnGroupElement } from '../types';\n\nimport { ELEMENT_COLUMN } from '../createColumnPlugin';\n\nexport const setColumnWidth = <V extends Value>(\n  editor: PlateEditor<V>,\n  groupPathRef: PathRef,\n  layout: Required<TColumnGroupElement>['layout']\n) => {\n  const path = groupPathRef.unref()!;\n\n  const columnGroup = getNodeEntry(editor, path);\n\n  if (!columnGroup) throw new Error(`can not find the column group in ${path}`);\n\n  const children = getChildren(columnGroup);\n\n  const childPaths = Array.from(children, (item) => item[1]);\n\n  childPaths.forEach((item, index) => {\n    const width = layout[index] + '%';\n\n    if (!width) return;\n\n    setNodes<TColumnElement>(\n      editor,\n      { width: width },\n      {\n        at: item,\n        match: (n) => isElement(n) && n.type === ELEMENT_COLUMN,\n      }\n    );\n  });\n};\n","import { useEditorSelector } from '@udecode/plate-common';\nimport { isCollapsed } from '@udecode/plate-common/server';\nimport { useReadOnly, useSelected } from 'slate-react';\n\nexport const useDebouncePopoverOpen = () => {\n  const readOnly = useReadOnly();\n  const selected = useSelected();\n\n  const selectionCollapsed = useEditorSelector(\n    (editor) => isCollapsed(editor.selection),\n    []\n  );\n\n  // TODO:should add debounce\n  return !readOnly && selected && selectionCollapsed;\n};\n"],"mappings":"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","names":["setNodes","isElement","isElement","ELEMENT_DEFAULT","insertNodes","insertNodes","ELEMENT_DEFAULT","isElement","isElement","setNodes","isCollapsed"]}