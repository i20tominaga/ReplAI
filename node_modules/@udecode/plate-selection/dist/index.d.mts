import * as zustand_x from 'zustand-x';
import { SelectionOptions, SelectionEvents, ChangedElements } from '@viselect/vanilla';
export { ChangedElements, SelectionEvent } from '@viselect/vanilla';
import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { QueryNodeOptions, Value, PlateEditor, WithPlatePlugin, TElement, TEditor } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as react from 'react';
import react__default from 'react';

interface SelectionAreaProps extends Omit<Partial<SelectionOptions>, 'boundaries'>, react__default.HTMLAttributes<HTMLDivElement> {
    className?: string;
    /**
     * The boundaries of the selection area.
     *
     * @boundaries ref of the selection area element.
     */
    getBoundaries?: (boundaries: SelectionOptions['boundaries']) => SelectionOptions['boundaries'];
    onBeforeStart?: SelectionEvents['beforestart'];
    onMove?: SelectionEvents['move'];
    onStart?: SelectionEvents['start'];
    onStop?: SelectionEvents['stop'];
}
declare function SelectionArea({ behaviour, children, container, document, features, getBoundaries, onBeforeStart, onMove, onStart, onStop, selectables, selectionAreaClass, selectionContainerClass, startAreas, ...props }: SelectionAreaProps): react__default.JSX.Element;

declare const blockSelectionStore: zustand_x.StoreApi<"selection", {
    isSelecting: boolean;
    selectedIds: Set<unknown>;
}, zustand_x.SetRecord<{
    isSelecting: boolean;
    selectedIds: Set<unknown>;
}> & {
    state: zustand_x.SetImmerState<{
        isSelecting: boolean;
        selectedIds: Set<unknown>;
    }>;
    mergeState: zustand_x.MergeState<{
        isSelecting: boolean;
        selectedIds: Set<unknown>;
    }>;
} & {
    resetSelectedIds: () => void;
    setSelectedIds: ({ added, removed }: ChangedElements) => void;
    unselect: () => void;
}, {
    isSelected: (id?: string) => boolean | "" | undefined;
    isSelectingSome: () => boolean;
}>;
declare const useBlockSelectionSelectors: () => zustand_x.StoreApiUse<{
    isSelecting: boolean;
    selectedIds: Set<unknown>;
}, {
    isSelected: (id?: string) => boolean | "" | undefined;
    isSelectingSome: () => boolean;
}>;
declare const blockSelectionSelectors: zustand_x.StoreApiGet<{
    isSelecting: boolean;
    selectedIds: Set<unknown>;
}, {
    isSelected: (id?: string) => boolean | "" | undefined;
    isSelectingSome: () => boolean;
}>;
declare const blockSelectionActions: zustand_x.SetRecord<{
    isSelecting: boolean;
    selectedIds: Set<unknown>;
}> & {
    state: zustand_x.SetImmerState<{
        isSelecting: boolean;
        selectedIds: Set<unknown>;
    }>;
    mergeState: zustand_x.MergeState<{
        isSelecting: boolean;
        selectedIds: Set<unknown>;
    }>;
} & {
    resetSelectedIds: () => void;
    setSelectedIds: ({ added, removed }: ChangedElements) => void;
    unselect: () => void;
};

declare const KEY_BLOCK_SELECTION = "blockSelection";
interface BlockSelectionPlugin {
    onKeyDownSelecting?: (e: KeyboardEvent) => void;
    query?: QueryNodeOptions;
    sizes?: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
}
declare const createBlockSelectionPlugin: <OP = BlockSelectionPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const onChangeBlockSelection: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => () => void;

declare const useHooksBlockSelection: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options }: WithPlatePlugin<BlockSelectionPlugin>) => void;

interface BlockSelectableOptions {
    element: TElement;
    active?: boolean;
    selectedColor?: string;
}
declare const useBlockSelectableState: ({ active, element, selectedColor, }: BlockSelectableOptions) => {
    active: boolean;
    element?: undefined;
    selectedColor?: undefined;
} | {
    active: boolean;
    element: TElement;
    selectedColor: string | undefined;
};
declare const useBlockSelectable: ({ element, selectedColor, }: ReturnType<typeof useBlockSelectableState>) => {
    props: {
        'data-key': string | undefined;
        className: string;
        key: string | undefined;
        style: {
            backgroundColor: string | undefined;
        } | undefined;
    };
};
declare function BlockSelectable({ children, options, ...props }: {
    options: BlockSelectableOptions;
} & react__default.HTMLAttributes<HTMLDivElement>): react__default.JSX.Element;

interface BlockSelectionAreaProps extends Partial<SelectionAreaProps> {
}
declare const useBlockSelectionArea: (props: BlockSelectionAreaProps) => SelectionAreaProps;
declare function BlockSelectionArea(props: BlockSelectionAreaProps): react__default.JSX.Element;

interface BlockStartAreaState {
    placement?: 'bottom' | 'left' | 'right' | 'top';
    size?: number | string;
}
declare const useBlockStartArea: ({ placement, size, }: BlockStartAreaState) => {
    props: {
        className: string;
        style: {
            bottom: number | undefined;
            cursor: string;
            height: string | number;
            left: number | undefined;
            position: string;
            right: number | undefined;
            top: number | undefined;
            userSelect: string;
            width: string | number;
            zIndex: number;
        };
    };
};
declare const BlockStartArea: react.ForwardRefExoticComponent<{
    as?: react.ElementType<any, keyof react.JSX.IntrinsicElements> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    options?: any;
    setProps?: ((hookProps: {
        className: string;
        style: {
            bottom: number | undefined;
            cursor: string;
            height: string | number;
            left: number | undefined;
            position: string;
            right: number | undefined;
            top: number | undefined;
            userSelect: string;
            width: string | number;
            zIndex: number;
        };
    }) => Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">) | undefined;
    state?: BlockStartAreaState | undefined;
    style?: react.CSSProperties | undefined;
} & Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & react.RefAttributes<any>>;

declare const getSelectedBlocks: <V extends Value>(editor: TEditor<V>) => _udecode_slate.TNodeEntry<_udecode_slate.ENode<V>>[];

declare const copySelectedBlocks: <V extends Value>(editor: PlateEditor<V>) => void;

declare const extractSelectableIds: (els: Element[]) => any[];

declare const pasteSelectedBlocks: <V extends Value>(editor: PlateEditor<V>, e: ClipboardEvent) => void;

/** Select inserted blocks from the last operations. */
declare const selectInsertedBlocks: <V extends Value>(editor: TEditor<V>) => void;

export { BlockSelectable, type BlockSelectableOptions, BlockSelectionArea, type BlockSelectionAreaProps, type BlockSelectionPlugin, BlockStartArea, type BlockStartAreaState, KEY_BLOCK_SELECTION, SelectionArea, type SelectionAreaProps, blockSelectionActions, blockSelectionSelectors, blockSelectionStore, copySelectedBlocks, createBlockSelectionPlugin, extractSelectableIds, getSelectedBlocks, onChangeBlockSelection, pasteSelectedBlocks, selectInsertedBlocks, useBlockSelectable, useBlockSelectableState, useBlockSelectionArea, useBlockSelectionSelectors, useBlockStartArea, useHooksBlockSelection };
