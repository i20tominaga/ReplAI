{"version":3,"sources":["../src/blockSelectionStore.ts","../src/utils/extractSelectableIds.ts","../src/createBlockSelectionPlugin.tsx","../src/components/BlockSelectable.tsx","../src/components/BlockSelectionArea.tsx","../src/components/SelectionArea.tsx","../src/components/BlockStartArea.tsx","../src/onChangeBlockSelection.ts","../src/useHooksBlockSelection.ts","../src/utils/copySelectedBlocks.ts","../src/queries/getSelectedBlocks.ts","../src/utils/pasteSelectedBlocks.ts","../src/utils/selectInsertedBlocks.ts"],"sourcesContent":["import { createZustandStore } from '@udecode/plate-common/server';\n\nimport type { ChangedElements } from './components/SelectionArea';\n\nimport { extractSelectableIds } from './utils/extractSelectableIds';\n\nexport const blockSelectionStore = createZustandStore('selection')({\n  isSelecting: false,\n  selectedIds: new Set(),\n})\n  .extendActions((set, get) => ({\n    resetSelectedIds: () => {\n      set.selectedIds(new Set());\n    },\n    setSelectedIds: ({ added, removed }: ChangedElements) => {\n      const prev = get.selectedIds();\n\n      const next = new Set(prev);\n      extractSelectableIds(added).forEach((id) => next.add(id));\n      extractSelectableIds(removed).forEach((id) => next.delete(id));\n\n      set.selectedIds(next);\n      set.isSelecting(true);\n    },\n    unselect: () => {\n      set.selectedIds(new Set());\n      set.isSelecting(false);\n    },\n  }))\n  .extendSelectors((set, get) => ({\n    isSelected: (id?: string) => id && get.selectedIds().has(id),\n    isSelectingSome: () => get.selectedIds().size > 0,\n  }));\n\nexport const useBlockSelectionSelectors = () => blockSelectionStore.use;\n\nexport const blockSelectionSelectors = blockSelectionStore.get;\n\nexport const blockSelectionActions = blockSelectionStore.set;\n","export const extractSelectableIds = (els: Element[]): any[] => {\n  return els.map((v) => (v as HTMLElement).dataset.key);\n};\n","import React from 'react';\n\nimport {\n  type QueryNodeOptions,\n  createPluginFactory,\n} from '@udecode/plate-common/server';\n\nimport { BlockSelectable } from './components/BlockSelectable';\nimport { BlockSelectionArea } from './components/BlockSelectionArea';\nimport { BlockStartArea } from './components/BlockStartArea';\nimport { onChangeBlockSelection } from './onChangeBlockSelection';\nimport { useHooksBlockSelection } from './useHooksBlockSelection';\n\nexport const KEY_BLOCK_SELECTION = 'blockSelection';\n\nexport interface BlockSelectionPlugin {\n  onKeyDownSelecting?: (e: KeyboardEvent) => void;\n  query?: QueryNodeOptions;\n  sizes?: {\n    bottom?: number;\n    left?: number;\n    right?: number;\n    top?: number;\n  };\n}\n\nexport const createBlockSelectionPlugin =\n  createPluginFactory<BlockSelectionPlugin>({\n    handlers: {\n      onChange: onChangeBlockSelection,\n    },\n    inject: {\n      aboveComponent:\n        () =>\n        ({ children, element }) =>\n          BlockSelectable({\n            children,\n            options: {\n              element,\n              selectedColor: 'rgb(219 234 254)',\n            },\n          }),\n    },\n    key: KEY_BLOCK_SELECTION,\n    options: {\n      query: {\n        maxLevel: 1,\n      },\n      sizes: {\n        bottom: 4,\n        left: 4,\n        right: 4,\n        top: 4,\n      },\n    },\n    then: (editor, { options }) => ({\n      renderAboveEditable: ({ children }) => (\n        <BlockSelectionArea>\n          <BlockStartArea\n            state={{\n              placement: 'left',\n              size: options.sizes?.left,\n            }}\n          />\n          <BlockStartArea\n            state={{\n              placement: 'top',\n              size: options.sizes?.top,\n            }}\n          />\n          <BlockStartArea\n            state={{\n              placement: 'right',\n              size: options.sizes?.right,\n            }}\n          />\n          <BlockStartArea\n            state={{\n              placement: 'bottom',\n              size: options.sizes?.bottom,\n            }}\n          />\n          {children}\n        </BlockSelectionArea>\n      ),\n    }),\n    useHooks: useHooksBlockSelection,\n  });\n","import React from 'react';\n\nimport { findNodePath, useEditorRef } from '@udecode/plate-common';\nimport {\n  type TElement,\n  getPluginOptions,\n  isInline,\n  queryNode,\n} from '@udecode/plate-common/server';\n\nimport { useBlockSelectionSelectors } from '../blockSelectionStore';\nimport {\n  type BlockSelectionPlugin,\n  KEY_BLOCK_SELECTION,\n} from '../createBlockSelectionPlugin';\n\nexport interface BlockSelectableOptions {\n  element: TElement;\n  active?: boolean;\n  selectedColor?: string;\n}\n\nexport const useBlockSelectableState = ({\n  active,\n  element,\n  selectedColor,\n}: BlockSelectableOptions) => {\n  const editor = useEditorRef();\n\n  const path = React.useMemo(\n    () => findNodePath(editor, element),\n    [editor, element]\n  );\n\n  if (!path || isInline(editor, element)) {\n    return {\n      active: active ?? false,\n    };\n  }\n\n  const { query } = getPluginOptions<BlockSelectionPlugin>(\n    editor,\n    KEY_BLOCK_SELECTION\n  );\n\n  if (query && !queryNode([element, path], query)) {\n    return {\n      active: active ?? false,\n    };\n  }\n\n  return {\n    active: active ?? true,\n    element,\n    selectedColor,\n  };\n};\n\nexport const useBlockSelectable = ({\n  element,\n  selectedColor,\n}: ReturnType<typeof useBlockSelectableState>) => {\n  const id = element?.id as string | undefined;\n  const isSelected = useBlockSelectionSelectors().isSelected(id);\n\n  const data = {\n    'data-key': id,\n  };\n\n  return {\n    props: {\n      className: isSelected\n        ? 'slate-selected slate-selectable'\n        : 'slate-selectable',\n      key: id,\n      style: isSelected\n        ? {\n            backgroundColor: selectedColor,\n          }\n        : undefined,\n      ...data,\n    },\n  };\n};\n\nexport function BlockSelectable({\n  children,\n  options,\n  ...props\n}: { options: BlockSelectableOptions } & React.HTMLAttributes<HTMLDivElement>) {\n  const state = useBlockSelectableState(options);\n  const { props: rootProps } = useBlockSelectable(state);\n\n  if (!state.active) return <>{children}</>;\n\n  return (\n    <div {...rootProps} {...props}>\n      {children}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { deselectEditor, useEditorRef } from '@udecode/plate-common';\n\nimport { blockSelectionActions } from '../blockSelectionStore';\nimport {\n  SelectionArea,\n  type SelectionAreaProps,\n  type SelectionEvent,\n} from './SelectionArea';\n\nexport interface BlockSelectionAreaProps extends Partial<SelectionAreaProps> {}\n\nexport const useBlockSelectionArea = (\n  props: BlockSelectionAreaProps\n): SelectionAreaProps => {\n  const editor = useEditorRef();\n\n  const onStart = ({ event, selection }: SelectionEvent) => {\n    deselectEditor(editor);\n\n    if (!event?.shiftKey) {\n      selection.clearSelection();\n      blockSelectionActions.resetSelectedIds();\n    }\n  };\n\n  const onMove = ({ store: { changed } }: SelectionEvent) => {\n    if (changed.added.length === 0 && changed.removed.length === 0) return;\n\n    blockSelectionActions.setSelectedIds(changed);\n  };\n\n  return {\n    className: 'slate-SelectionArea',\n    onMove,\n    onStart,\n    // Query selectors for elements which can be selected.\n    selectables: '.slate-selectable',\n    // Class for the selection-area itself (the element).\n    selectionAreaClass: 'slate-selection-area',\n    // Class for the selection-area container.\n    // selectionContainerClass=\"selection-area-container\"\n    // Query selector or dom-node to set up container for the selection-area element.\n    // container=\"body\"\n    // document object - if you want to use it within an embed document (or iframe).\n    // document={window.document}\n    // Query selectors for elements from where a selection can be started from.\n    startAreas: '.slate-start-area',\n    style: {\n      position: 'relative',\n      width: '100%',\n    },\n    // Query selectors for elements which will be used as boundaries for the selection.\n    // boundaries={['html']}\n    // Behaviour related options.\n    // behaviour={{\n    //   // Specifies what should be done if already selected elements get selected again.\n    //   //   invert: Invert selection for elements which were already selected\n    //   //   keep: Keep selected elements (use clearSelection() to remove those)\n    //   //   drop: Remove stored elements after they have been touched\n    //   overlap: 'invert',\n    //\n    //   // On which point an element should be selected.\n    //   // Available modes are cover (cover the entire element), center (touch the center) or\n    //   // the default mode is touch (just touching it).\n    //   intersect: 'touch',\n    //\n    //   // px, how many pixels the point should move before starting the selection (combined distance).\n    //   // Or specifiy the threshold for each axis by passing an object like {x: <number>, y: <number>}.\n    //   startThreshold: 10,\n    //\n    //   // Scroll configuration.\n    //   scrolling: {\n    //     // On scrollable areas the number on px per frame is devided by this amount.\n    //     // Default is 10 to provide a enjoyable scroll experience.\n    //     speedDivider: 10,\n    //\n    //     // Browsers handle mouse-wheel events differently, this number will be used as\n    //     // numerator to calculate the mount of px while scrolling manually: manualScrollSpeed / scrollSpeedDivider.\n    //     manualSpeed: 750,\n    //\n    //     // This property defines the virtual inset margins from the borders of the container\n    //     // component that, when crossed by the mouse/touch, trigger the scrolling. Useful for\n    //     // fullscreen containers.\n    //     startScrollMargins: { x: 0, y: 0 },\n    //   },\n    // }}\n    // // Features.\n    // features={{\n    //   // Enable / disable touch support.\n    //   touch: true,\n    //\n    //   // Range selection.\n    //   range: true,\n    //\n    //   // Configuration in case a selectable gets just clicked.\n    //   singleTap: {\n    //     // Enable single-click selection (Also disables range-selection via shift + ctrl).\n    //     allow: true,\n    //\n    //     // 'native' (element was mouse-event target) or 'touch' (element visually touched).\n    //     intersect: 'native',\n    //   },\n    // }}\n    ...props,\n  };\n};\n\nexport function BlockSelectionArea(props: BlockSelectionAreaProps) {\n  const componentProps = useBlockSelectionArea(props);\n\n  return <SelectionArea {...componentProps} />;\n}\n","import React from 'react';\n\nimport VanillaSelectionArea, {\n  type SelectionEvents,\n  type SelectionOptions,\n} from '@viselect/vanilla';\n\nexport interface SelectionAreaProps\n  extends Omit<Partial<SelectionOptions>, 'boundaries'>,\n    React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n  /**\n   * The boundaries of the selection area.\n   *\n   * @boundaries ref of the selection area element.\n   */\n  getBoundaries?: (\n    boundaries: SelectionOptions['boundaries']\n  ) => SelectionOptions['boundaries'];\n  onBeforeStart?: SelectionEvents['beforestart'];\n  onMove?: SelectionEvents['move'];\n  onStart?: SelectionEvents['start'];\n\n  onStop?: SelectionEvents['stop'];\n}\n\nexport function SelectionArea({\n  behaviour,\n  children,\n  container,\n  document,\n  features,\n  getBoundaries = (boundaries) => boundaries,\n  onBeforeStart,\n  onMove,\n  onStart,\n  onStop,\n  selectables,\n  selectionAreaClass,\n  selectionContainerClass,\n  startAreas,\n  ...props\n}: SelectionAreaProps) {\n  const ref = React.createRef<HTMLDivElement>();\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  React.useEffect(() => {\n    const opt = {\n      behaviour,\n      container,\n      document,\n      features,\n      selectables,\n      selectionAreaClass,\n      selectionContainerClass,\n      startAreas,\n    };\n\n    const areaBoundaries = ref.current as HTMLElement;\n\n    const selection = new VanillaSelectionArea({\n      boundaries: getBoundaries(areaBoundaries),\n      ...opt,\n    });\n\n    onBeforeStart && selection.on('beforestart', onBeforeStart);\n    onStart && selection.on('start', onStart);\n    onMove && selection.on('move', onMove);\n    onStop && selection.on('stop', onStop);\n\n    return () => selection.destroy();\n  }, []);\n\n  return (\n    <div ref={ref} {...props}>\n      {children}\n    </div>\n  );\n}\n\nexport { type ChangedElements, type SelectionEvent } from '@viselect/vanilla';\n","import { createPrimitiveComponent } from '@udecode/plate-common';\n\nexport interface BlockStartAreaState {\n  placement?: 'bottom' | 'left' | 'right' | 'top';\n  size?: number | string;\n}\n\nexport const useBlockStartArea = ({\n  placement = 'left',\n  size = 'auto',\n}: BlockStartAreaState) => {\n  return {\n    props: {\n      className: `slate-start-area slate-start-area-${placement}`,\n      style: {\n        bottom: ['bottom'].includes(placement) ? 0 : undefined,\n        cursor: 'text',\n        height: ['bottom', 'top'].includes(placement) ? size : '100%',\n        left: ['bottom', 'left', 'top'].includes(placement) ? 0 : undefined,\n        position: 'absolute',\n        right: ['right'].includes(placement) ? 0 : undefined,\n        top: ['left', 'right', 'top'].includes(placement) ? 0 : undefined,\n        userSelect: 'none',\n        width: ['left', 'right'].includes(placement) ? size : '100%',\n        zIndex: 1,\n      },\n    },\n  };\n};\n\nexport const BlockStartArea = createPrimitiveComponent('div')({\n  propsHook: useBlockStartArea,\n});\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport {\n  blockSelectionActions,\n  blockSelectionSelectors,\n} from './blockSelectionStore';\n\nexport const onChangeBlockSelection =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E\n  ) =>\n  () => {\n    if (editor.selection && blockSelectionSelectors.isSelecting()) {\n      blockSelectionActions.unselect();\n    }\n  };\n","import React from 'react';\n\nimport { focusEditor, isEditorReadOnly } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  findNode,\n  getEndPoint,\n  isHotkey,\n  removeNodes,\n} from '@udecode/plate-common/server';\n\nimport type { BlockSelectionPlugin } from './createBlockSelectionPlugin';\n\nimport {\n  blockSelectionActions,\n  blockSelectionSelectors,\n  useBlockSelectionSelectors,\n} from './blockSelectionStore';\nimport { copySelectedBlocks } from './utils/copySelectedBlocks';\nimport { selectInsertedBlocks } from './utils/index';\nimport { pasteSelectedBlocks } from './utils/pasteSelectedBlocks';\n\nexport const useHooksBlockSelection = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options }: WithPlatePlugin<BlockSelectionPlugin>\n) => {\n  const { onKeyDownSelecting } = options;\n  const isSelecting = useBlockSelectionSelectors().isSelecting();\n  const selectedIds = useBlockSelectionSelectors().selectedIds();\n\n  // TODO: test\n  React.useEffect(() => {\n    const el = document.querySelector('#slate-shadow-input');\n\n    if (el) {\n      el.remove();\n    }\n\n    const isReadonly = isEditorReadOnly(editor);\n\n    if (isSelecting) {\n      const input = document.createElement('input');\n      input.setAttribute('id', 'slate-shadow-input');\n      // no scrolling on focus\n      input.style.position = 'fixed';\n      input.style.zIndex = '10000';\n      // hide\n      input.style.top = '-300px';\n      input.style.left = '-300px';\n      input.style.opacity = '0';\n\n      input.addEventListener('keydown', (e) => {\n        onKeyDownSelecting?.(e);\n\n        // selecting commands\n        if (!blockSelectionSelectors.isSelecting()) return;\n        if (isHotkey('escape')(e)) {\n          blockSelectionActions.unselect();\n        }\n        if (isHotkey('mod+z')(e)) {\n          editor.undo();\n          selectInsertedBlocks(editor);\n        }\n        if (isHotkey('mod+shift+z')(e)) {\n          editor.redo();\n          selectInsertedBlocks(editor);\n        }\n        // selecting some commands\n        if (!blockSelectionSelectors.isSelectingSome()) return;\n        if (isHotkey('enter')(e)) {\n          // get the first block in the selection\n          const entry = findNode(editor, {\n            match: (n) => blockSelectionSelectors.selectedIds().has(n.id),\n          });\n\n          if (entry) {\n            const [, path] = entry;\n\n            // focus the end of that block\n            focusEditor(editor, getEndPoint(editor, path));\n            e.preventDefault();\n          }\n        }\n        if (isHotkey(['backspace', 'delete'])(e) && !isReadonly) {\n          removeNodes(editor, {\n            at: [],\n            match: (n) => blockSelectionSelectors.selectedIds().has(n.id),\n          });\n        }\n      });\n\n      // TODO: paste + select blocks if selecting editor\n      input.addEventListener('copy', (e) => {\n        e.preventDefault();\n\n        if (blockSelectionSelectors.isSelectingSome()) {\n          copySelectedBlocks(editor);\n        }\n      });\n      input.addEventListener('cut', (e) => {\n        e.preventDefault();\n\n        if (blockSelectionSelectors.isSelectingSome()) {\n          copySelectedBlocks(editor);\n\n          if (!isReadonly) {\n            removeNodes(editor, {\n              at: [],\n              match: (n) => blockSelectionSelectors.selectedIds().has(n.id),\n            });\n          }\n        }\n      });\n      input.addEventListener('paste', (e) => {\n        e.preventDefault();\n\n        if (!isReadonly) {\n          pasteSelectedBlocks(editor, e);\n        }\n      });\n      document.body.append(input);\n      input.focus();\n    }\n  }, [editor, isSelecting, onKeyDownSelecting, selectedIds]);\n};\n","import {\n  type PlateEditor,\n  type Value,\n  deselect,\n  getEndPoint,\n  getStartPoint,\n  select,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\nimport copyToClipboard from 'copy-to-clipboard';\n\nimport {\n  blockSelectionActions,\n  blockSelectionSelectors,\n} from '../blockSelectionStore';\nimport { getSelectedBlocks } from '../queries/getSelectedBlocks';\n\nexport const copySelectedBlocks = <V extends Value>(editor: PlateEditor<V>) => {\n  const selectedIds = blockSelectionSelectors.selectedIds();\n  const selectedEntries = getSelectedBlocks(editor);\n  const selectedFragment = selectedEntries.map(([node]) => node);\n\n  copyToClipboard(' ', {\n    onCopy: (dataTransfer) => {\n      const data = dataTransfer as DataTransfer;\n\n      if (!data) return;\n\n      let textPlain = '';\n      const div = document.createElement('div');\n\n      withoutNormalizing(editor, () => {\n        selectedEntries.forEach(([, path]) => {\n          // select block by block\n          select(editor, {\n            anchor: getStartPoint(editor, path),\n            focus: getEndPoint(editor, path),\n          });\n\n          // set data from selection\n          editor.setFragmentData(data);\n\n          // get plain text\n          textPlain += `${data.getData('text/plain')}\\n`;\n\n          // get html text\n          const divChild = document.createElement('div');\n          divChild.innerHTML = data.getData('text/html');\n          div.append(divChild);\n        });\n\n        // deselect and select back selectedIds\n        deselect(editor);\n        blockSelectionActions.selectedIds(selectedIds);\n      });\n\n      data.setData('text/plain', textPlain);\n      data.setData('text/html', div.innerHTML);\n\n      // set slate fragment\n      const selectedFragmentStr = JSON.stringify(selectedFragment);\n      const encodedFragment = window.btoa(\n        encodeURIComponent(selectedFragmentStr)\n      );\n      data.setData('application/x-slate-fragment', encodedFragment);\n    },\n  });\n};\n","import {\n  type TEditor,\n  type TElement,\n  type Value,\n  getNodeEntries,\n} from '@udecode/plate-common/server';\n\nimport { blockSelectionSelectors } from '../blockSelectionStore';\n\nexport const getSelectedBlocks = <V extends Value>(editor: TEditor<V>) => {\n  const selectedIds = blockSelectionSelectors.selectedIds();\n\n  return [\n    ...getNodeEntries(editor, {\n      at: [],\n      match: (n) => selectedIds.has((n as TElement).id),\n    }),\n  ];\n};\n","import { focusEditor, insertData } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  type Value,\n  deselect,\n  getStartPoint,\n  insertNodes,\n  isElementEmpty,\n} from '@udecode/plate-common/server';\nimport { Path } from 'slate';\n\nimport { getSelectedBlocks } from '../queries/getSelectedBlocks';\nimport { selectInsertedBlocks } from './selectInsertedBlocks';\n\nexport const pasteSelectedBlocks = <V extends Value>(\n  editor: PlateEditor<V>,\n  e: ClipboardEvent\n) => {\n  const entries = getSelectedBlocks(editor);\n\n  if (entries.length > 0) {\n    const entry = entries.at(-1)!;\n    const [node, path] = entry;\n\n    focusEditor(editor, getStartPoint(editor, path));\n\n    if (!isElementEmpty(editor, node as any)) {\n      const at = Path.next(path);\n\n      insertNodes(editor, editor.blockFactory({}, at), {\n        at,\n        select: true,\n      });\n    }\n\n    // quick fix until we find a way to merge history\n    // withoutMergingHistory(editor, () => {\n    insertData(editor, e.clipboardData!);\n    // });\n    // insertData is focusing the editor so deselect\n    deselect(editor);\n\n    selectInsertedBlocks(editor);\n  }\n};\n","import {\n  type TEditor,\n  type Value,\n  isBlock,\n} from '@udecode/plate-common/server';\n\nimport { blockSelectionActions } from '../blockSelectionStore';\n\n/** Select inserted blocks from the last operations. */\nexport const selectInsertedBlocks = <V extends Value>(editor: TEditor<V>) => {\n  const ids = new Set();\n\n  editor.operations.forEach((op) => {\n    if (op.type === 'insert_node' && op.node.id && isBlock(editor, op.node)) {\n      ids.add(op.node.id);\n    }\n  });\n\n  setTimeout(() => {\n    blockSelectionActions.isSelecting(true);\n    blockSelectionActions.selectedIds(ids);\n  }, 0);\n};\n"],"mappings":"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","names":["React","React","useEditorRef","React","document","React","useEditorRef","React","React","focusEditor","getEndPoint","deselect","getStartPoint","getStartPoint","deselect","React","focusEditor","getEndPoint","React"]}