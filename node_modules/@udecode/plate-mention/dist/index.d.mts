import * as _udecode_plate_common from '@udecode/plate-common';
import { TNodeProps, PlatePluginKey, TElement, PlateEditor, Value, WithPlatePlugin, MoveSelectionByOffsetOptions, KeyboardEventHandler, FindNodeOptions, TNode } from '@udecode/plate-common';
import * as _udecode_slate from '@udecode/slate';
import { Data, TComboboxItem, ComboboxOnSelectItem, NoData } from '@udecode/plate-combobox';
import { Path } from 'slate';

type CreateMentionNode<TData extends Data> = (item: TComboboxItem<TData>, meta: CreateMentionNodeMeta) => TNodeProps<TMentionElement>;
interface CreateMentionNodeMeta {
    search: string;
}
declare const getMentionOnSelectItem: <TData extends unknown = undefined>({ key, }?: PlatePluginKey) => ComboboxOnSelectItem<TData>;

interface TMentionElement extends TElement {
    value: string;
}
interface TMentionInputElement extends TElement {
    trigger: string;
}
interface MentionPlugin<TData extends Data = NoData> {
    createMentionNode?: CreateMentionNode<TData>;
    id?: string;
    inputCreation?: {
        key: string;
        value: string;
    };
    insertSpaceAfterMention?: boolean;
    query?: (editor: PlateEditor) => boolean;
    trigger?: string;
    triggerPreviousCharPattern?: RegExp;
}

declare const ELEMENT_MENTION = "mention";
declare const ELEMENT_MENTION_INPUT = "mention_input";
/** Enables support for autocompleting @mentions. */
declare const createMentionPlugin: <OP = MentionPlugin<undefined>, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common.PlateEditor<OV> = _udecode_plate_common.PlateEditor<OV>>(override?: Partial<_udecode_plate_common.PlatePlugin<_udecode_plate_common.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common.PlatePlugin<_udecode_plate_common.NoInfer<OP>, OV, OE>;

declare const withMention: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { id, inputCreation, query, trigger, triggerPreviousCharPattern }, }: WithPlatePlugin<MentionPlugin, V, E>) => E;

declare const mentionOnKeyDownHandler: <V extends Value>(options?: MoveSelectionByOffsetOptions<V>) => (editor: PlateEditor<V>) => KeyboardEventHandler;

declare const findMentionInput: <V extends Value>(editor: PlateEditor<V>, options?: Omit<FindNodeOptions<V>, 'match'>) => _udecode_slate.TNodeEntry<TMentionInputElement> | undefined;

declare const isNodeMentionInput: <V extends Value>(editor: PlateEditor<V>, node: TNode) => node is TMentionInputElement;

declare const isSelectionInMentionInput: <V extends Value>(editor: PlateEditor<V>) => boolean;

declare const removeMentionInput: <V extends Value>(editor: PlateEditor<V>, path: Path) => boolean;

export { type CreateMentionNode, type CreateMentionNodeMeta, ELEMENT_MENTION, ELEMENT_MENTION_INPUT, type MentionPlugin, type TMentionElement, type TMentionInputElement, createMentionPlugin, findMentionInput, getMentionOnSelectItem, isNodeMentionInput, isSelectionInMentionInput, mentionOnKeyDownHandler, removeMentionInput, withMention };
