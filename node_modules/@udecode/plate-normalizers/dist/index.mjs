// src/createNormalizeTypesPlugin.ts
import {
  createPluginFactory
} from "@udecode/plate-common/server";

// src/withNormalizeTypes.ts
import {
  getNode,
  insertElements,
  isElement,
  setElements
} from "@udecode/plate-common/server";
var withNormalizeTypes = (editor, { options: { onError, rules } }) => {
  const { normalizeNode } = editor;
  editor.normalizeNode = ([currentNode, currentPath]) => {
    if (currentPath.length === 0) {
      const endCurrentNormalizationPass = rules.some(
        ({ path, strictType, type }) => {
          const node = getNode(editor, path);
          if (node) {
            if (strictType && isElement(node) && node.type !== strictType) {
              setElements(
                editor,
                { type: strictType },
                {
                  at: path
                }
              );
              return true;
            }
          } else {
            try {
              insertElements(
                editor,
                {
                  children: [{ text: "" }],
                  type: strictType != null ? strictType : type
                },
                { at: path }
              );
              return true;
            } catch (error) {
              onError == null ? void 0 : onError(error);
            }
          }
          return false;
        }
      );
      if (endCurrentNormalizationPass) {
        return;
      }
    }
    return normalizeNode([currentNode, currentPath]);
  };
  return editor;
};

// src/createNormalizeTypesPlugin.ts
var KEY_NORMALIZE_TYPES = "normalizeTypes";
var createNormalizeTypesPlugin = createPluginFactory({
  key: KEY_NORMALIZE_TYPES,
  options: {
    rules: []
  },
  withOverrides: withNormalizeTypes
});

// src/createRemoveEmptyNodesPlugin.ts
import { createPluginFactory as createPluginFactory2 } from "@udecode/plate-common/server";

// src/withRemoveEmptyNodes.ts
import {
  getNodeString,
  isElement as isElement2,
  removeNodes
} from "@udecode/plate-common/server";
import castArray from "lodash/castArray.js";
var withRemoveEmptyNodes = (editor, { options: { types: _types } }) => {
  const types = castArray(_types);
  const { normalizeNode } = editor;
  editor.normalizeNode = ([node, path]) => {
    if (isElement2(node) && node.type && types.includes(node.type) && getNodeString(node) === "") {
      removeNodes(editor, { at: path });
      return;
    }
    normalizeNode([node, path]);
  };
  return editor;
};

// src/createRemoveEmptyNodesPlugin.ts
var KEY_REMOVE_EMPTY_NODES = "removeEmptyNodes";
var createRemoveEmptyNodesPlugin = createPluginFactory2({
  key: KEY_REMOVE_EMPTY_NODES,
  withOverrides: withRemoveEmptyNodes
});
export {
  KEY_NORMALIZE_TYPES,
  KEY_REMOVE_EMPTY_NODES,
  createNormalizeTypesPlugin,
  createRemoveEmptyNodesPlugin,
  withNormalizeTypes,
  withRemoveEmptyNodes
};
//# sourceMappingURL=index.mjs.map