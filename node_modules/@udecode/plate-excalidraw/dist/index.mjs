var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/createExcalidrawPlugin.ts
import { createPluginFactory } from "@udecode/plate-common/server";
var ELEMENT_EXCALIDRAW = "excalidraw";
var createExcalidrawPlugin = createPluginFactory({
  isElement: true,
  isVoid: true,
  key: ELEMENT_EXCALIDRAW
});

// src/hooks/useExcalidrawElement.ts
import React from "react";
var useExcalidrawElement = ({
  element,
  libraryItems = [],
  scrollToContent = true
}) => {
  var _a, _b;
  const [Excalidraw, setExcalidraw] = React.useState(null);
  React.useEffect(() => {
    void import("@excalidraw/excalidraw").then(
      (comp) => setExcalidraw(comp.Excalidraw)
    );
  });
  const _excalidrawRef = React.useRef(null);
  const excalidrawProps = {
    autoFocus: false,
    excalidrawRef: _excalidrawRef,
    initialData: {
      appState: (_a = element.data) == null ? void 0 : _a.state,
      elements: (_b = element.data) == null ? void 0 : _b.elements,
      libraryItems,
      scrollToContent
    }
    // onChange: (elements: readonly ExcalidrawElementType[], state: AppState) => {
    // const path = findNodePath(editor, element);
    // FIXME: setNodes triggers render loop as onChange is triggered on rerender
    // in the meantime, the prop can be used to save the data outside slate
    // setNodes(editor, { data: { elements, state } }, { at: path });
    // },
  };
  return {
    Excalidraw,
    excalidrawProps
  };
};

// src/transforms/insertExcalidraw.ts
import {
  getParentNode,
  insertNodes
} from "@udecode/plate-common/server";
var insertExcalidraw = (editor, _a = {}, options = {}) => {
  var _b = _a, {
    key = ELEMENT_EXCALIDRAW
  } = _b, props = __objRest(_b, [
    "key"
  ]);
  if (!editor.selection)
    return;
  const selectionParentEntry = getParentNode(editor, editor.selection);
  if (!selectionParentEntry)
    return;
  const [, path] = selectionParentEntry;
  insertNodes(
    editor,
    __spreadValues({
      children: [{ text: "" }],
      type: key
    }, props),
    __spreadValues({ at: path, nextBlock: true }, options)
  );
};
export {
  ELEMENT_EXCALIDRAW,
  createExcalidrawPlugin,
  insertExcalidraw,
  useExcalidrawElement
};
//# sourceMappingURL=index.mjs.map