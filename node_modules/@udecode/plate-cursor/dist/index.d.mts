import React from 'react';
import { UnknownObject, Value } from '@udecode/plate-common/server';
import { Range } from 'slate';
import { UnknownObject as UnknownObject$1, ClassNames, TReactEditor } from '@udecode/plate-common';

type SelectionRect = {
    height: number;
    left: number;
    top: number;
    width: number;
};
type CaretPosition = {
    height: number;
    left: number;
    top: number;
};
type CursorState<TCursorData extends UnknownObject = UnknownObject> = {
    data?: TCursorData;
    key?: any;
    selection: Range | null;
};
interface CursorOverlayState<TCursorData extends Record<string, unknown>> extends CursorState<TCursorData> {
    caretPosition: CaretPosition | null;
    selectionRects: SelectionRect[];
}
type CursorData = {
    selectionStyle?: React.CSSProperties;
    style?: React.CSSProperties;
};

interface CursorProps<TCursorData extends UnknownObject$1 = UnknownObject$1> extends CursorOverlayState<TCursorData>, ClassNames<{
    caret: string;
    selectionRect: string;
}> {
    /** Whether to disable the caret. */
    disableCaret?: boolean;
    /** Whether to disable the selection rects. */
    disableSelection?: boolean;
    /**
     * Custom caret component. For example, you could display a label next to the
     * caret.
     *
     * @default styled div
     */
    onRenderCaret?: React.FC<Pick<CursorProps<TCursorData>, 'caretPosition' | 'data'>>;
    /** Overrides `Caret` component */
    onRenderSelectionRect?: React.FC<{
        selectionRect: SelectionRect;
    } & Pick<CursorProps<TCursorData>, 'data'>>;
}
interface CursorOverlayProps<TCursorData extends UnknownObject$1 = UnknownObject$1> extends Pick<CursorProps<CursorData>, 'classNames' | 'disableCaret' | 'disableSelection' | 'onRenderCaret' | 'onRenderSelectionRect'> {
    /**
     * Container the overlay will be rendered in. If set, all returned overlay
     * positions will be relative to this container.
     */
    containerRef?: React.RefObject<HTMLElement>;
    /** Cursor states to use for calculating the overlay positions, by key. */
    cursors?: Record<string, CursorState<TCursorData>>;
    /** Overrides `Cursor` component. */
    onRenderCursor?: React.FC<CursorProps>;
    /**
     * Whether to refresh the cursor overlay positions on container resize.
     *
     * @default true
     */
    refreshOnResize?: boolean;
}
declare function CursorOverlayContent<TCursorData extends UnknownObject$1 = UnknownObject$1>({ classNames, onRenderCaret, onRenderCursor: CursorComponent, onRenderSelectionRect, ...props }: CursorOverlayProps<TCursorData>): React.JSX.Element | null;
declare function CursorOverlay<TCursorData extends UnknownObject$1 = UnknownObject$1>(props: CursorOverlayProps<TCursorData>): React.JSX.Element | null;

declare const FROZEN_EMPTY_ARRAY: SelectionRect[];
declare const useCursorOverlayPositions: <TCursorData extends UnknownObject>({ containerRef, cursors: cursorStates, refreshOnResize, }?: CursorOverlayProps<TCursorData>) => {
    cursors: CursorOverlayState<TCursorData>[];
    refresh: (sync?: boolean) => void;
};

interface useRefreshOnResizeOptions extends Pick<CursorOverlayProps, 'containerRef' | 'refreshOnResize'> {
    selectionRectCache: React.MutableRefObject<WeakMap<Range, SelectionRect[]>>;
}
declare const useRefreshOnResize: ({ containerRef, refreshOnResize, selectionRectCache, }: useRefreshOnResizeOptions) => {
    refresh: (sync?: boolean) => void;
};

declare const useRequestReRender: () => (immediate?: boolean) => void;

/** Get the caret position of a range from selectionRects. */
declare const getCaretPosition: (selectionRects: SelectionRect[], range: Range) => CaretPosition | null;

/** Get cursor overlay state from selection rects. */
declare const getCursorOverlayState: <TCursorData extends UnknownObject = UnknownObject>({ cursors: cursorStates, selectionRects, }: {
    selectionRects: Record<string, SelectionRect[]>;
} & Pick<CursorOverlayProps<TCursorData>, "cursors">) => CursorOverlayState<TCursorData>[];

declare const getSelectionRects: <V extends Value>(editor: TReactEditor<V>, { range, xOffset, yOffset, }: {
    range: Range;
    xOffset: number;
    yOffset: number;
}) => SelectionRect[];

export { type CaretPosition, type CursorData, CursorOverlay, CursorOverlayContent, type CursorOverlayProps, type CursorOverlayState, type CursorProps, type CursorState, FROZEN_EMPTY_ARRAY, type SelectionRect, getCaretPosition, getCursorOverlayState, getSelectionRects, useCursorOverlayPositions, useRefreshOnResize, type useRefreshOnResizeOptions, useRequestReRender };
