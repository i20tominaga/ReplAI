var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/captionGlobalStore.ts
import { createZustandStore } from "@udecode/plate-common/server";
var captionGlobalStore = createZustandStore("caption")({
  /** When defined, focus end of caption textarea with the same path. */
  focusEndCaptionPath: null,
  /** When defined, focus start of caption textarea with the same path. */
  focusStartCaptionPath: null
});

// src/createCaptionPlugin.ts
import { createPluginFactory } from "@udecode/plate-common/server";

// src/onKeyDownCaption.ts
import {
  getBlockAbove,
  getPluginTypes,
  isHotkey
} from "@udecode/plate-common/server";
var onKeyDownCaption = (editor, { options }) => (e) => {
  if (e.defaultPrevented)
    return;
  if (isHotkey("down", e)) {
    const types = getPluginTypes(editor, options.pluginKeys);
    const entry = getBlockAbove(editor, {
      match: { type: types }
    });
    if (!entry)
      return;
    captionGlobalStore.set.focusEndCaptionPath(entry[1]);
  }
};

// src/withCaption.ts
import {
  getAboveNode,
  getNodeString,
  getPluginTypes as getPluginTypes2,
  isCollapsed,
  isHotkey as isHotkey2
} from "@udecode/plate-common/server";
var withCaption = (editor, { options }) => {
  const { apply } = editor;
  const { pluginKeys } = options;
  editor.apply = (operation) => {
    if (operation.type === "set_selection") {
      const newSelection = __spreadValues(__spreadValues({}, editor.selection), operation.newProperties);
      if (editor.currentKeyboardEvent && isHotkey2("up", editor.currentKeyboardEvent) && newSelection && isCollapsed(newSelection)) {
        const types = getPluginTypes2(editor, pluginKeys);
        const entry = getAboveNode(editor, {
          at: newSelection,
          match: { type: types }
        });
        if (entry) {
          const [node] = entry;
          if (node.caption && getNodeString({ children: node.caption }).length > 0) {
            setTimeout(() => {
              captionGlobalStore.set.focusEndCaptionPath(entry[1]);
            }, 0);
          }
        }
      }
    }
    apply(operation);
  };
  return editor;
};

// src/createCaptionPlugin.ts
var KEY_CAPTION = "caption";
var createCaptionPlugin = createPluginFactory({
  handlers: {
    onKeyDown: onKeyDownCaption
  },
  key: KEY_CAPTION,
  options: {
    pluginKeys: []
  },
  withOverrides: withCaption
});

// src/components/Caption.tsx
import { createPrimitiveComponent } from "@udecode/plate-common";
import { useReadOnly, useSelected } from "slate-react";

// src/hooks/useCaptionString.ts
import React from "react";
import { useElement } from "@udecode/plate-common";
import { getNodeString as getNodeString2 } from "@udecode/plate-common/server";
var useCaptionString = () => {
  const { caption: nodeCaption = [{ children: [{ text: "" }] }] } = useElement();
  return React.useMemo(() => {
    return getNodeString2(nodeCaption[0]) || "";
  }, [nodeCaption]);
};

// src/components/Caption.tsx
var useCaptionState = (options = {}) => {
  const captionString = useCaptionString();
  const selected = useSelected();
  const _readOnly = useReadOnly();
  const readOnly = options.readOnly || _readOnly;
  return {
    captionString,
    readOnly,
    selected
  };
};
var useCaption = (state) => {
  return {
    hidden: state.captionString.length === 0 && (state.readOnly || !state.selected)
  };
};
var Caption = createPrimitiveComponent(
  "figcaption"
)({
  propsHook: useCaption,
  stateHook: useCaptionState
});

// src/components/CaptionTextarea.tsx
import React3 from "react";
import {
  createPrimitiveComponent as createPrimitiveComponent2,
  findNodePath,
  focusEditor,
  useEditorRef,
  useElement as useElement2
} from "@udecode/plate-common";
import {
  getNodeString as getNodeString3,
  getPointAfter,
  isHotkey as isHotkey3,
  setNodes
} from "@udecode/plate-common/server";
import { Path } from "slate";
import { useReadOnly as useReadOnly2 } from "slate-react";

// src/components/TextareaAutosize.tsx
import React2 from "react";
import ReactTextareaAutosize from "react-textarea-autosize";
import { useIsomorphicLayoutEffect } from "@udecode/plate-common";
var TextareaAutosize = React2.forwardRef((props, ref) => {
  const [isRerendered, setIsRerendered] = React2.useState(false);
  useIsomorphicLayoutEffect(() => setIsRerendered(true), []);
  return isRerendered ? /* @__PURE__ */ React2.createElement(ReactTextareaAutosize, __spreadProps(__spreadValues({}, props), { ref })) : null;
});
TextareaAutosize.displayName = "TextareaAutosize";

// src/components/CaptionTextarea.tsx
var useCaptionTextareaFocus = (textareaRef) => {
  const editor = useEditorRef();
  const element = useElement2();
  const focusCaptionPath = captionGlobalStore.use.focusEndCaptionPath();
  React3.useEffect(() => {
    if (focusCaptionPath && textareaRef.current) {
      const path = findNodePath(editor, element);
      if (path && Path.equals(path, focusCaptionPath)) {
        textareaRef.current.focus();
        captionGlobalStore.set.focusEndCaptionPath(null);
      }
    }
  }, [editor, element, focusCaptionPath, textareaRef]);
};
var useCaptionTextareaState = () => {
  const element = useElement2();
  const {
    caption: nodeCaption = [{ children: [{ text: "" }] }]
  } = element;
  const [captionValue, setCaptionValue] = React3.useState(getNodeString3(nodeCaption[0]));
  const readOnly = useReadOnly2();
  const textareaRef = React3.useRef(null);
  useCaptionTextareaFocus(textareaRef);
  return {
    captionValue,
    element,
    readOnly,
    setCaptionValue,
    textareaRef
  };
};
var useCaptionTextarea = ({
  captionValue,
  element,
  readOnly,
  setCaptionValue,
  textareaRef
}) => {
  const editor = useEditorRef();
  const onChange = React3.useCallback(
    (e) => {
      const newValue = e.target.value;
      setCaptionValue(newValue);
      const path = findNodePath(editor, element);
      if (!path)
        return;
      setNodes(
        editor,
        { caption: [{ text: newValue }] },
        { at: path }
      );
    },
    [editor, element, setCaptionValue]
  );
  const onKeyDown = (e) => {
    if (isHotkey3("up", e)) {
      const path = findNodePath(editor, element);
      if (!path)
        return;
      e.preventDefault();
      focusEditor(editor, path);
    }
    if (isHotkey3("down", e)) {
      const path = findNodePath(editor, element);
      if (!path)
        return;
      const nextNodePath = getPointAfter(editor, path);
      if (!nextNodePath)
        return;
      e.preventDefault();
      focusEditor(editor, nextNodePath);
    }
  };
  return {
    props: {
      onChange,
      onKeyDown,
      readOnly,
      value: captionValue
    },
    ref: textareaRef
  };
};
var CaptionTextarea = createPrimitiveComponent2(TextareaAutosize)({
  propsHook: useCaptionTextarea,
  stateHook: useCaptionTextareaState
});
export {
  Caption,
  CaptionTextarea,
  KEY_CAPTION,
  TextareaAutosize,
  captionGlobalStore,
  createCaptionPlugin,
  onKeyDownCaption,
  useCaption,
  useCaptionState,
  useCaptionString,
  useCaptionTextarea,
  useCaptionTextareaFocus,
  useCaptionTextareaState,
  withCaption
};
//# sourceMappingURL=index.mjs.map