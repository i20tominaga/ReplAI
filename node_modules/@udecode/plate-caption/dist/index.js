"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Caption: () => Caption,
  CaptionTextarea: () => CaptionTextarea,
  KEY_CAPTION: () => KEY_CAPTION,
  TextareaAutosize: () => TextareaAutosize,
  captionGlobalStore: () => captionGlobalStore,
  createCaptionPlugin: () => createCaptionPlugin,
  onKeyDownCaption: () => onKeyDownCaption,
  useCaption: () => useCaption,
  useCaptionState: () => useCaptionState,
  useCaptionString: () => useCaptionString,
  useCaptionTextarea: () => useCaptionTextarea,
  useCaptionTextareaFocus: () => useCaptionTextareaFocus,
  useCaptionTextareaState: () => useCaptionTextareaState,
  withCaption: () => withCaption
});
module.exports = __toCommonJS(src_exports);

// src/captionGlobalStore.ts
var import_server = require("@udecode/plate-common/server");
var captionGlobalStore = (0, import_server.createZustandStore)("caption")({
  /** When defined, focus end of caption textarea with the same path. */
  focusEndCaptionPath: null,
  /** When defined, focus start of caption textarea with the same path. */
  focusStartCaptionPath: null
});

// src/createCaptionPlugin.ts
var import_server4 = require("@udecode/plate-common/server");

// src/onKeyDownCaption.ts
var import_server2 = require("@udecode/plate-common/server");
var onKeyDownCaption = (editor, { options }) => (e) => {
  if (e.defaultPrevented)
    return;
  if ((0, import_server2.isHotkey)("down", e)) {
    const types = (0, import_server2.getPluginTypes)(editor, options.pluginKeys);
    const entry = (0, import_server2.getBlockAbove)(editor, {
      match: { type: types }
    });
    if (!entry)
      return;
    captionGlobalStore.set.focusEndCaptionPath(entry[1]);
  }
};

// src/withCaption.ts
var import_server3 = require("@udecode/plate-common/server");
var withCaption = (editor, { options }) => {
  const { apply } = editor;
  const { pluginKeys } = options;
  editor.apply = (operation) => {
    if (operation.type === "set_selection") {
      const newSelection = __spreadValues(__spreadValues({}, editor.selection), operation.newProperties);
      if (editor.currentKeyboardEvent && (0, import_server3.isHotkey)("up", editor.currentKeyboardEvent) && newSelection && (0, import_server3.isCollapsed)(newSelection)) {
        const types = (0, import_server3.getPluginTypes)(editor, pluginKeys);
        const entry = (0, import_server3.getAboveNode)(editor, {
          at: newSelection,
          match: { type: types }
        });
        if (entry) {
          const [node] = entry;
          if (node.caption && (0, import_server3.getNodeString)({ children: node.caption }).length > 0) {
            setTimeout(() => {
              captionGlobalStore.set.focusEndCaptionPath(entry[1]);
            }, 0);
          }
        }
      }
    }
    apply(operation);
  };
  return editor;
};

// src/createCaptionPlugin.ts
var KEY_CAPTION = "caption";
var createCaptionPlugin = (0, import_server4.createPluginFactory)({
  handlers: {
    onKeyDown: onKeyDownCaption
  },
  key: KEY_CAPTION,
  options: {
    pluginKeys: []
  },
  withOverrides: withCaption
});

// src/components/Caption.tsx
var import_plate_common2 = require("@udecode/plate-common");
var import_slate_react = require("slate-react");

// src/hooks/useCaptionString.ts
var import_react = __toESM(require("react"));
var import_plate_common = require("@udecode/plate-common");
var import_server5 = require("@udecode/plate-common/server");
var useCaptionString = () => {
  const { caption: nodeCaption = [{ children: [{ text: "" }] }] } = (0, import_plate_common.useElement)();
  return import_react.default.useMemo(() => {
    return (0, import_server5.getNodeString)(nodeCaption[0]) || "";
  }, [nodeCaption]);
};

// src/components/Caption.tsx
var useCaptionState = (options = {}) => {
  const captionString = useCaptionString();
  const selected = (0, import_slate_react.useSelected)();
  const _readOnly = (0, import_slate_react.useReadOnly)();
  const readOnly = options.readOnly || _readOnly;
  return {
    captionString,
    readOnly,
    selected
  };
};
var useCaption = (state) => {
  return {
    hidden: state.captionString.length === 0 && (state.readOnly || !state.selected)
  };
};
var Caption = (0, import_plate_common2.createPrimitiveComponent)(
  "figcaption"
)({
  propsHook: useCaption,
  stateHook: useCaptionState
});

// src/components/CaptionTextarea.tsx
var import_react3 = __toESM(require("react"));
var import_plate_common4 = require("@udecode/plate-common");
var import_server6 = require("@udecode/plate-common/server");
var import_slate = require("slate");
var import_slate_react2 = require("slate-react");

// src/components/TextareaAutosize.tsx
var import_react2 = __toESM(require("react"));
var import_react_textarea_autosize = __toESM(require("react-textarea-autosize"));
var import_plate_common3 = require("@udecode/plate-common");
var TextareaAutosize = import_react2.default.forwardRef((props, ref) => {
  const [isRerendered, setIsRerendered] = import_react2.default.useState(false);
  (0, import_plate_common3.useIsomorphicLayoutEffect)(() => setIsRerendered(true), []);
  return isRerendered ? /* @__PURE__ */ import_react2.default.createElement(import_react_textarea_autosize.default, __spreadProps(__spreadValues({}, props), { ref })) : null;
});
TextareaAutosize.displayName = "TextareaAutosize";

// src/components/CaptionTextarea.tsx
var useCaptionTextareaFocus = (textareaRef) => {
  const editor = (0, import_plate_common4.useEditorRef)();
  const element = (0, import_plate_common4.useElement)();
  const focusCaptionPath = captionGlobalStore.use.focusEndCaptionPath();
  import_react3.default.useEffect(() => {
    if (focusCaptionPath && textareaRef.current) {
      const path = (0, import_plate_common4.findNodePath)(editor, element);
      if (path && import_slate.Path.equals(path, focusCaptionPath)) {
        textareaRef.current.focus();
        captionGlobalStore.set.focusEndCaptionPath(null);
      }
    }
  }, [editor, element, focusCaptionPath, textareaRef]);
};
var useCaptionTextareaState = () => {
  const element = (0, import_plate_common4.useElement)();
  const {
    caption: nodeCaption = [{ children: [{ text: "" }] }]
  } = element;
  const [captionValue, setCaptionValue] = import_react3.default.useState((0, import_server6.getNodeString)(nodeCaption[0]));
  const readOnly = (0, import_slate_react2.useReadOnly)();
  const textareaRef = import_react3.default.useRef(null);
  useCaptionTextareaFocus(textareaRef);
  return {
    captionValue,
    element,
    readOnly,
    setCaptionValue,
    textareaRef
  };
};
var useCaptionTextarea = ({
  captionValue,
  element,
  readOnly,
  setCaptionValue,
  textareaRef
}) => {
  const editor = (0, import_plate_common4.useEditorRef)();
  const onChange = import_react3.default.useCallback(
    (e) => {
      const newValue = e.target.value;
      setCaptionValue(newValue);
      const path = (0, import_plate_common4.findNodePath)(editor, element);
      if (!path)
        return;
      (0, import_server6.setNodes)(
        editor,
        { caption: [{ text: newValue }] },
        { at: path }
      );
    },
    [editor, element, setCaptionValue]
  );
  const onKeyDown = (e) => {
    if ((0, import_server6.isHotkey)("up", e)) {
      const path = (0, import_plate_common4.findNodePath)(editor, element);
      if (!path)
        return;
      e.preventDefault();
      (0, import_plate_common4.focusEditor)(editor, path);
    }
    if ((0, import_server6.isHotkey)("down", e)) {
      const path = (0, import_plate_common4.findNodePath)(editor, element);
      if (!path)
        return;
      const nextNodePath = (0, import_server6.getPointAfter)(editor, path);
      if (!nextNodePath)
        return;
      e.preventDefault();
      (0, import_plate_common4.focusEditor)(editor, nextNodePath);
    }
  };
  return {
    props: {
      onChange,
      onKeyDown,
      readOnly,
      value: captionValue
    },
    ref: textareaRef
  };
};
var CaptionTextarea = (0, import_plate_common4.createPrimitiveComponent)(TextareaAutosize)({
  propsHook: useCaptionTextarea,
  stateHook: useCaptionTextareaState
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Caption,
  CaptionTextarea,
  KEY_CAPTION,
  TextareaAutosize,
  captionGlobalStore,
  createCaptionPlugin,
  onKeyDownCaption,
  useCaption,
  useCaptionState,
  useCaptionString,
  useCaptionTextarea,
  useCaptionTextareaFocus,
  useCaptionTextareaState,
  withCaption
});
//# sourceMappingURL=index.js.map